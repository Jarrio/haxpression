# Generated by Haxe

from datetime import datetime as python_lib_datetime_Datetime
from datetime import timezone as python_lib_datetime_Timezone
import math as python_lib_Math
import math as Math
import random as python_lib_Random
import functools as python_lib_Functools
import inspect as python_lib_Inspect
import re as python_lib_Re
from io import StringIO as python_lib_io_StringIO


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in self.params]))) + ")")

Enum._hx_class = Enum


class Class:
    _hx_class_name = "Class"
Class._hx_class = Class


class Date:
    _hx_class_name = "Date"
    __slots__ = ("date",)
    _hx_fields = ["date"]
    _hx_methods = ["toString"]
    _hx_statics = ["EPOCH_UTC", "now", "fromTime", "UTC", "datetimeTimestamp", "fromString"]

    def __init__(self,year,month,day,hour,_hx_min,sec):
        if (year < python_lib_datetime_Datetime.min.year):
            year = python_lib_datetime_Datetime.min.year
        if (day == 0):
            day = 1
        self.date = python_lib_datetime_Datetime(year, (month + 1), day, hour, _hx_min, sec, 0)

    def toString(self):
        m = ((self.date.month - 1) + 1)
        d = self.date.day
        h = self.date.hour
        mi = self.date.minute
        s = self.date.second
        return ((((((((((Std.string(self.date.year) + "-") + HxOverrides.stringOrNull(((("0" + Std.string(m)) if ((m < 10)) else ("" + Std.string(m)))))) + "-") + HxOverrides.stringOrNull(((("0" + Std.string(d)) if ((d < 10)) else ("" + Std.string(d)))))) + " ") + HxOverrides.stringOrNull(((("0" + Std.string(h)) if ((h < 10)) else ("" + Std.string(h)))))) + ":") + HxOverrides.stringOrNull(((("0" + Std.string(mi)) if ((mi < 10)) else ("" + Std.string(mi)))))) + ":") + HxOverrides.stringOrNull(((("0" + Std.string(s)) if ((s < 10)) else ("" + Std.string(s))))))

    @staticmethod
    def now():
        d = Date(1970, 0, 1, 0, 0, 0)
        d.date = python_lib_datetime_Datetime.now()
        return d

    @staticmethod
    def fromTime(t):
        d = Date(1970, 0, 1, 0, 0, 0)
        d.date = python_lib_datetime_Datetime.fromtimestamp((t / 1000.0))
        return d

    @staticmethod
    def UTC(year,month,day,hour,_hx_min,sec):
        return Date.datetimeTimestamp(python_lib_datetime_Datetime(year, (month + 1), day, hour, _hx_min, sec, 0, python_lib_datetime_Timezone.utc),Date.EPOCH_UTC)

    @staticmethod
    def datetimeTimestamp(dt,epoch):
        return ((dt - epoch).total_seconds() * 1000)

    @staticmethod
    def fromString(s):
        if ((len(s)) == 8):
            k = s.split(":")
            return Date(0, 0, 0, Std.parseInt((k[0] if 0 < len(k) else None)), Std.parseInt((k[1] if 1 < len(k) else None)), Std.parseInt((k[2] if 2 < len(k) else None)))
        elif ((len(s)) == 10):
            k1 = s.split("-")
            return Date(Std.parseInt((k1[0] if 0 < len(k1) else None)), (Std.parseInt((k1[1] if 1 < len(k1) else None)) - 1), Std.parseInt((k1[2] if 2 < len(k1) else None)), 0, 0, 0)
        elif ((len(s)) == 19):
            k2 = s.split(" ")
            y = (k2[0] if 0 < len(k2) else None).split("-")
            t = (k2[1] if 1 < len(k2) else None).split(":")
            return Date(Std.parseInt((y[0] if 0 < len(y) else None)), (Std.parseInt((y[1] if 1 < len(y) else None)) - 1), Std.parseInt((y[2] if 2 < len(y) else None)), Std.parseInt((t[0] if 0 < len(t) else None)), Std.parseInt((t[1] if 1 < len(t) else None)), Std.parseInt((t[2] if 2 < len(t) else None)))
        else:
            raise _HxException(("Invalid date format : " + ("null" if s is None else s)))

Date._hx_class = Date


class EReg:
    _hx_class_name = "EReg"
    __slots__ = ("pattern", "matchObj", "_hx_global")
    _hx_fields = ["pattern", "matchObj", "global"]

    def __init__(self,r,opt):
        self.matchObj = None
        self._hx_global = False
        options = 0
        _g1 = 0
        _g = len(opt)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            if (c == 109):
                options = (options | python_lib_Re.M)
            if (c == 105):
                options = (options | python_lib_Re.I)
            if (c == 115):
                options = (options | python_lib_Re.S)
            if (c == 117):
                options = (options | python_lib_Re.U)
            if (c == 103):
                self._hx_global = True
        self.pattern = python_lib_Re.compile(r,options)

EReg._hx_class = EReg


class EnumValue:
    _hx_class_name = "EnumValue"
EnumValue._hx_class = EnumValue


class Lambda:
    _hx_class_name = "Lambda"
    __slots__ = ()
    _hx_statics = ["iter", "fold", "find"]

    @staticmethod
    def iter(it,f):
        tmp = HxOverrides.iterator(it)
        while tmp.hasNext():
            f(tmp.next())

    @staticmethod
    def fold(it,f,first):
        tmp = HxOverrides.iterator(it)
        while tmp.hasNext():
            first = f(tmp.next(),first)
        return first

    @staticmethod
    def find(it,f):
        tmp = HxOverrides.iterator(it)
        while tmp.hasNext():
            v = tmp.next()
            if f(v):
                return v
        return None
Lambda._hx_class = Lambda


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "setField", "isFunction"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)

    @staticmethod
    def setField(o,field,value):
        setattr(o,(("_hx_" + field) if (field in python_Boot.keywords) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value)

    @staticmethod
    def isFunction(f):
        if (not ((python_lib_Inspect.isfunction(f) or python_lib_Inspect.ismethod(f)))):
            return hasattr(f,"func_code")
        else:
            return True
Reflect._hx_class = Reflect


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["is", "string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def _hx_is(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if (t == Dynamic):
            return True
        isBool = isinstance(v,bool)
        if ((t == Bool) and isBool):
            return True
        if ((((not isBool) and (not (t == Bool))) and (t == Int)) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        tmp2 = None
        tmp3 = None
        if (((not isBool) and vIsFloat) and (t == Int)):
            f = v
            if ((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))):
                tmp3 = (not python_lib_Math.isnan(f))
            else:
                tmp3 = False
        else:
            tmp3 = False
        if tmp3:
            tmp4 = None
            try:
                tmp4 = int(v)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                tmp4 = None
            tmp2 = (v == tmp4)
        else:
            tmp2 = False
        if tmp2:
            tmp1 = (v <= 2147483647)
        else:
            tmp1 = False
        if tmp1:
            tmp = (v >= -2147483648)
        else:
            tmp = False
        if tmp:
            return True
        if (((not isBool) and (t == Float)) and isinstance(v,(float, int))):
            return True
        if (t == str):
            return isinstance(v,str)
        isEnumType = (t == Enum)
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = (t == Class)
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp5 = None
        try:
            tmp5 = isinstance(v,t)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            tmp5 = False
        if tmp5:
            return True
        if python_lib_Inspect.isclass(t):
            loop = None
            def _hx_local_1(intf):
                f1 = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f1 is not None):
                    _g = 0
                    while (_g < len(f1)):
                        i = (f1[_g] if _g >= 0 and _g < len(f1) else None)
                        _g = (_g + 1)
                        if HxOverrides.eq(i,t):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            loop1 = loop
            currentClass = v.__class__
            while (currentClass is not None):
                if loop1(currentClass):
                    return True
                currentClass = python_Boot.getSuperClass(currentClass)
            return False
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                prefix = HxString.substr(x,0,2).lower()
                if (prefix == "0x"):
                    return int(x,16)
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                if (r is None):
                    r1 = Std.shortenPossibleNumber(x)
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            elif (((((((((((_g2 == 57) or ((_g2 == 56))) or ((_g2 == 55))) or ((_g2 == 54))) or ((_g2 == 53))) or ((_g2 == 52))) or ((_g2 == 51))) or ((_g2 == 50))) or ((_g2 == 49))) or ((_g2 == 48))) or ((_g2 == 46))):
                r = (("null" if r is None else r) + ("null" if c is None else c))
            else:
                break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN
Std._hx_class = Std


class Float:
    _hx_class_name = "Float"
Float._hx_class = Float


class Int:
    _hx_class_name = "Int"
Int._hx_class = Int


class Bool:
    _hx_class_name = "Bool"
Bool._hx_class = Bool


class Dynamic:
    _hx_class_name = "Dynamic"
Dynamic._hx_class = Dynamic


class StringBuf:
    _hx_class_name = "StringBuf"
    __slots__ = ("b",)
    _hx_fields = ["b"]

    def __init__(self):
        self.b = python_lib_io_StringIO()

StringBuf._hx_class = StringBuf


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["startsWith", "endsWith", "isSpace", "ltrim", "rtrim", "trim", "lpad"]

    @staticmethod
    def startsWith(s,start):
        if (len(s) >= len(start)):
            return (HxString.substr(s,0,len(start)) == start)
        else:
            return False

    @staticmethod
    def endsWith(s,end):
        elen = len(end)
        slen = len(s)
        if (slen >= elen):
            return (HxString.substr(s,(slen - elen),elen) == end)
        else:
            return False

    @staticmethod
    def isSpace(s,pos):
        if (((len(s) == 0) or ((pos < 0))) or ((pos >= len(s)))):
            return False
        c = HxString.charCodeAt(s,pos)
        if (not (((c > 8) and ((c < 14))))):
            return (c == 32)
        else:
            return True

    @staticmethod
    def ltrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,r)):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,r,(l - r))
        else:
            return s

    @staticmethod
    def rtrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,((l - r) - 1))):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,0,(l - r))
        else:
            return s

    @staticmethod
    def trim(s):
        return StringTools.ltrim(StringTools.rtrim(s))

    @staticmethod
    def lpad(s,c,l):
        if (len(c) <= 0):
            return s
        while (len(s) < l):
            s = (("null" if c is None else c) + ("null" if s is None else s))
        return s
StringTools._hx_class = StringTools

class ValueType(Enum):
    __slots__ = ()
    _hx_class_name = "ValueType"
    _hx_constructs = ["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"]

    @staticmethod
    def TClass(c):
        return ValueType("TClass", 6, [c])

    @staticmethod
    def TEnum(e):
        return ValueType("TEnum", 7, [e])
ValueType.TNull = ValueType("TNull", 0, list())
ValueType.TInt = ValueType("TInt", 1, list())
ValueType.TFloat = ValueType("TFloat", 2, list())
ValueType.TBool = ValueType("TBool", 3, list())
ValueType.TObject = ValueType("TObject", 4, list())
ValueType.TFunction = ValueType("TFunction", 5, list())
ValueType.TUnknown = ValueType("TUnknown", 8, list())
ValueType._hx_class = ValueType


class Type:
    _hx_class_name = "Type"
    __slots__ = ()
    _hx_statics = ["typeof"]

    @staticmethod
    def typeof(v):
        if (v is None):
            return ValueType.TNull
        elif isinstance(v,bool):
            return ValueType.TBool
        elif isinstance(v,int):
            return ValueType.TInt
        elif isinstance(v,float):
            return ValueType.TFloat
        elif isinstance(v,str):
            return ValueType.TClass(str)
        elif isinstance(v,list):
            return ValueType.TClass(list)
        elif (isinstance(v,_hx_AnonObject) or python_lib_Inspect.isclass(v)):
            return ValueType.TObject
        elif isinstance(v,Enum):
            return ValueType.TEnum(v.__class__)
        elif (isinstance(v,type) or hasattr(v,"_hx_class")):
            return ValueType.TClass(v.__class__)
        elif callable(v):
            return ValueType.TFunction
        else:
            return ValueType.TUnknown
Type._hx_class = Type


class graphx_Edge:
    _hx_class_name = "graphx.Edge"
    __slots__ = ("_hx_from", "to")
    _hx_fields = ["from", "to"]

    def __init__(self,_hx_from,to):
        self._hx_from = graphx__NodeOrValue_NodeOrValue_Impl_.toNode(_hx_from)
        self.to = graphx__NodeOrValue_NodeOrValue_Impl_.toNode(to)

graphx_Edge._hx_class = graphx_Edge


class graphx_Graph:
    _hx_class_name = "graphx.Graph"
    __slots__ = ("nodes", "edges", "nodeFunctions")
    _hx_fields = ["nodes", "edges", "nodeFunctions"]
    _hx_methods = ["addNode", "addEdgeFrom", "addEdgeTo", "addEdgesFrom", "addEdgesTo", "getEdgesOut", "getEdgesIn", "dfs", "bfs", "hasCycle", "topologicalSort", "clone", "contains", "anyNode", "allNodes", "getKey", "equals", "toObject", "toString"]

    def __init__(self,nodeFunctions):
        self.nodes = []
        self.edges = []
        self.nodeFunctions = nodeFunctions

    def addNode(self,nv):
        if (not self.contains(nv)):
            self.nodes.append(graphx__NodeOrValue_NodeOrValue_Impl_.toNode(nv))
        return self

    def addEdgeFrom(self,_hx_from,to):
        self.addNode(_hx_from)
        self.addNode(to)
        self.edges.append(graphx_Edge(_hx_from, to))
        return self

    def addEdgeTo(self,to,_hx_from):
        return self.addEdgeFrom(_hx_from,to)

    def addEdgesFrom(self,_hx_from,tos):
        def _hx_local_1():
            def _hx_local_0(to,acc):
                return acc.addEdgeFrom(_hx_from,to)
            return Lambda.fold(tos,_hx_local_0,self)
        return _hx_local_1()

    def addEdgesTo(self,to,froms):
        def _hx_local_1():
            def _hx_local_0(_hx_from,acc):
                return acc.addEdgeFrom(_hx_from,to)
            return Lambda.fold(froms,_hx_local_0,self)
        return _hx_local_1()

    def getEdgesOut(self,nv):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(edge):
                return _gthis.equals(nv,graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(edge._hx_from))
            return list(filter(_hx_local_0,self.edges))
        return _hx_local_1()

    def getEdgesIn(self,nv):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(edge):
                return _gthis.equals(nv,graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(edge.to))
            return list(filter(_hx_local_0,self.edges))
        return _hx_local_1()

    def dfs(self,visit,acc):
        _gthis = self
        visited = haxe_ds_StringMap()
        dfsFromNode = None
        def _hx_local_3(node):
            nonlocal acc
            key = _gthis.getKey(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(node))
            if key in visited.h:
                return acc
            visited.h[key] = True
            _this = _gthis.getEdgesOut(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(node))
            def _hx_local_0(edge):
                return edge.to
            def _hx_local_1(edge1):
                return (not _gthis.getKey(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(edge1.to)) in visited.h)
            def _hx_local_2(unvisitedNode,acc1):
                return dfsFromNode(unvisitedNode)
            acc = Lambda.fold(list(map(_hx_local_0,list(filter(_hx_local_1,_this)))),_hx_local_2,acc)
            return visit(acc,node)
        dfsFromNode = _hx_local_3
        dfsFromNode1 = dfsFromNode
        def _hx_local_5():
            def _hx_local_4(node1,acc2):
                return dfsFromNode1(node1)
            return Lambda.fold(self.nodes,_hx_local_4,acc)
        return _hx_local_5()

    def bfs(self,visit,acc):
        _gthis = self
        queue = []
        visited = haxe_ds_StringMap()
        def _hx_local_3(node):
            nonlocal acc
            queue.append(node)
            while (len(queue) > 0):
                currentNode = (None if ((len(queue) == 0)) else queue.pop(0))
                key = _gthis.getKey(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(currentNode))
                if key in visited.h:
                    continue
                visited.h[key] = True
                acc = visit(acc,currentNode)
                _this = _gthis.getEdgesOut(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(currentNode))
                def _hx_local_0(edge):
                    return edge.to
                def _hx_local_1(edge1):
                    return (not _gthis.getKey(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(edge1.to)) in visited.h)
                def _hx_local_2(unvisitedNode):
                    queue.append(unvisitedNode)
                Lambda.iter(list(map(_hx_local_0,list(filter(_hx_local_1,_this)))),_hx_local_2)
            return acc
        bfsFromNode = _hx_local_3
        def _hx_local_5():
            def _hx_local_4(node1,acc1):
                return bfsFromNode(node1)
            return Lambda.fold(self.nodes,_hx_local_4,acc)
        return _hx_local_5()

    def hasCycle(self):
        raise _HxException("not implemented")

    def topologicalSort(self):
        def _hx_local_0(acc,node):
            acc.append(node.value)
            return acc
        result = self.dfs(_hx_local_0,[])
        result.reverse()
        return result

    def clone(self):
        newGraph = graphx_Graph(self.nodeFunctions)
        def _hx_local_0(node,acc):
            return newGraph.addNode(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(graphx_Node(node.value)))
        newGraph = Lambda.fold(self.nodes,_hx_local_0,newGraph)
        def _hx_local_1(edge,acc1):
            return newGraph.addEdgeFrom(graphx__NodeOrValue_NodeOrValue_Impl_.fromValue(edge._hx_from.value),graphx__NodeOrValue_NodeOrValue_Impl_.fromValue(edge.to.value))
        newGraph = Lambda.fold(self.edges,_hx_local_1,newGraph)
        return newGraph

    def contains(self,nv):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(node):
                return _gthis.equals(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode(node),nv)
            return self.anyNode(_hx_local_0)
        return _hx_local_1()

    def anyNode(self,predicate):
        _g = 0
        _g1 = self.nodes
        while (_g < len(_g1)):
            node = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if predicate(node):
                return True
        return False

    def allNodes(self,predicate):
        _g = 0
        _g1 = self.nodes
        while (_g < len(_g1)):
            node = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (not predicate(node)):
                return False
        return True

    def getKey(self,nv):
        return self.nodeFunctions.getKey(graphx__NodeOrValue_NodeOrValue_Impl_.toValue(nv))

    def equals(self,a,b):
        return self.nodeFunctions.equals(graphx__NodeOrValue_NodeOrValue_Impl_.toValue(a),graphx__NodeOrValue_NodeOrValue_Impl_.toValue(b))

    def toObject(self):
        def _hx_local_2():
            def _hx_local_0(node):
                return node.value
            def _hx_local_1(edge):
                return _hx_AnonObject({'_hx_from': edge._hx_from.value, 'to': edge.to.value})
            return _hx_AnonObject({'nodes': list(map(_hx_local_0,self.nodes)), 'edges': list(map(_hx_local_1,self.edges))})
        return _hx_local_2()

    def toString(self):
        return haxe_format_JsonPrinter.print(self.toObject(),None,"  ")

graphx_Graph._hx_class = graphx_Graph


class graphx_Node:
    _hx_class_name = "graphx.Node"
    __slots__ = ("value",)
    _hx_fields = ["value"]

    def __init__(self,value):
        self.value = value

graphx_Node._hx_class = graphx_Node

class graphx_NodeOrValueType(Enum):
    __slots__ = ()
    _hx_class_name = "graphx.NodeOrValueType"
    _hx_constructs = ["NVNode", "NVValue"]

    @staticmethod
    def NVNode(node):
        return graphx_NodeOrValueType("NVNode", 0, [node])

    @staticmethod
    def NVValue(value):
        return graphx_NodeOrValueType("NVValue", 1, [value])
graphx_NodeOrValueType._hx_class = graphx_NodeOrValueType


class graphx__NodeOrValue_NodeOrValue_Impl_:
    _hx_class_name = "graphx._NodeOrValue.NodeOrValue_Impl_"
    __slots__ = ()
    _hx_statics = ["_new", "fromNode", "fromValue", "mapNodes", "mapValues", "toNode", "toValue"]

    @staticmethod
    def _new(nodeOrValueType):
        return nodeOrValueType

    @staticmethod
    def fromNode(node):
        return graphx__NodeOrValue_NodeOrValue_Impl_._new(graphx_NodeOrValueType.NVNode(node))

    @staticmethod
    def fromValue(value):
        return graphx__NodeOrValue_NodeOrValue_Impl_._new(graphx_NodeOrValueType.NVValue(value))

    @staticmethod
    def mapNodes(nodes):
        return list(map(graphx__NodeOrValue_NodeOrValue_Impl_.fromNode,nodes))

    @staticmethod
    def mapValues(values):
        return list(map(graphx__NodeOrValue_NodeOrValue_Impl_.fromValue,values))

    @staticmethod
    def toNode(this1):
        if ((this1.index) == 0):
            return this1.params[0]
        elif ((this1.index) == 1):
            return graphx_Node(this1.params[0])
        else:
            pass

    @staticmethod
    def toValue(this1):
        if ((this1.index) == 0):
            return this1.params[0].value
        elif ((this1.index) == 1):
            return this1.params[0]
        else:
            pass
graphx__NodeOrValue_NodeOrValue_Impl_._hx_class = graphx__NodeOrValue_NodeOrValue_Impl_


class graphx_StringGraph(graphx_Graph):
    _hx_class_name = "graphx.StringGraph"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = graphx_Graph


    def __init__(self):
        def _hx_local_0(a,b):
            return (a == b)
        def _hx_local_1(a1):
            return a1
        super().__init__(_hx_AnonObject({'equals': _hx_local_0, 'getKey': _hx_local_1}))
graphx_StringGraph._hx_class = graphx_StringGraph


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
    _hx_methods = ["get", "set", "keys"]
haxe_IMap._hx_class = haxe_IMap

class haxe_ds_Either(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.ds.Either"
    _hx_constructs = ["Left", "Right"]

    @staticmethod
    def Left(v):
        return haxe_ds_Either("Left", 0, [v])

    @staticmethod
    def Right(v):
        return haxe_ds_Either("Right", 1, [v])
haxe_ds_Either._hx_class = haxe_ds_Either


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["set", "get", "remove", "keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.h = dict()

    def set(self,key,value):
        self.h[key] = value

    def get(self,key):
        return self.h.get(key,None)

    def remove(self,key):
        has = key in self.h
        if has:
            del self.h[key]
        return has

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))

haxe_ds_StringMap._hx_class = haxe_ds_StringMap


class haxe_format_JsonPrinter:
    _hx_class_name = "haxe.format.JsonPrinter"
    __slots__ = ("buf", "replacer", "indent", "pretty", "nind")
    _hx_fields = ["buf", "replacer", "indent", "pretty", "nind"]
    _hx_methods = ["write", "fieldsString", "quote"]
    _hx_statics = ["print"]

    def __init__(self,replacer,space):
        self.replacer = replacer
        self.indent = space
        self.pretty = (space is not None)
        self.nind = 0
        self.buf = StringBuf()

    def write(self,k,v):
        if (self.replacer is not None):
            v = self.replacer(k,v)
        _g = Type.typeof(v)
        if ((_g.index) == 0):
            self.buf.b.write("null")
        elif ((_g.index) == 1):
            self.buf.b.write(Std.string(v))
        elif ((_g.index) == 2):
            v1 = None
            f = v
            if (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f))):
                v1 = v
            else:
                v1 = "null"
            self.buf.b.write(Std.string(v1))
        elif ((_g.index) == 3):
            self.buf.b.write(Std.string(v))
        elif ((_g.index) == 4):
            self.fieldsString(v,python_Boot.fields(v))
        elif ((_g.index) == 5):
            self.buf.b.write("\"<fun>\"")
        elif ((_g.index) == 6):
            c = _g.params[0]
            if (c == str):
                self.quote(v)
            elif (c == list):
                v2 = v
                self.buf.b.write("".join(map(chr,[91])))
                _hx_len = len(v2)
                last = (_hx_len - 1)
                _g1 = 0
                while (_g1 < _hx_len):
                    i = _g1
                    _g1 = (_g1 + 1)
                    if (i > 0):
                        self.buf.b.write("".join(map(chr,[44])))
                    else:
                        _hx_local_0 = self
                        _hx_local_1 = _hx_local_0.nind
                        _hx_local_0.nind = (_hx_local_1 + 1)
                        _hx_local_1
                    if self.pretty:
                        self.buf.b.write("".join(map(chr,[10])))
                    if self.pretty:
                        self.buf.b.write(Std.string(StringTools.lpad("",self.indent,(self.nind * len(self.indent)))))
                    self.write(i,(v2[i] if i >= 0 and i < len(v2) else None))
                    if (i == last):
                        _hx_local_2 = self
                        _hx_local_3 = _hx_local_2.nind
                        _hx_local_2.nind = (_hx_local_3 - 1)
                        _hx_local_3
                        if self.pretty:
                            self.buf.b.write("".join(map(chr,[10])))
                        if self.pretty:
                            self.buf.b.write(Std.string(StringTools.lpad("",self.indent,(self.nind * len(self.indent)))))
                self.buf.b.write("".join(map(chr,[93])))
            elif (c == haxe_ds_StringMap):
                v3 = v
                o = _hx_AnonObject({})
                tmp = v3.keys()
                while tmp.hasNext():
                    k1 = tmp.next()
                    value = v3.h.get(k1,None)
                    setattr(o,(("_hx_" + k1) if (k1 in python_Boot.keywords) else (("_hx_" + k1) if (((((len(k1) > 2) and ((ord(k1[0]) == 95))) and ((ord(k1[1]) == 95))) and ((ord(k1[(len(k1) - 1)]) != 95)))) else k1)),value)
                self.fieldsString(o,python_Boot.fields(o))
            elif (c == Date):
                v4 = v
                self.quote(v4.toString())
            else:
                self.fieldsString(v,python_Boot.fields(v))
        elif ((_g.index) == 7):
            i1 = v.index
            self.buf.b.write(Std.string(i1))
        elif ((_g.index) == 8):
            self.buf.b.write("\"???\"")
        else:
            pass

    def fieldsString(self,v,fields):
        self.buf.b.write("".join(map(chr,[123])))
        _hx_len = len(fields)
        last = (_hx_len - 1)
        first = True
        _g1 = 0
        while (_g1 < _hx_len):
            i = _g1
            _g1 = (_g1 + 1)
            f = (fields[i] if i >= 0 and i < len(fields) else None)
            value = Reflect.field(v,f)
            if Reflect.isFunction(value):
                continue
            if first:
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.nind
                _hx_local_0.nind = (_hx_local_1 + 1)
                _hx_local_1
                first = False
            else:
                self.buf.b.write("".join(map(chr,[44])))
            if self.pretty:
                self.buf.b.write("".join(map(chr,[10])))
            if self.pretty:
                self.buf.b.write(Std.string(StringTools.lpad("",self.indent,(self.nind * len(self.indent)))))
            self.quote(f)
            self.buf.b.write("".join(map(chr,[58])))
            if self.pretty:
                self.buf.b.write("".join(map(chr,[32])))
            self.write(f,value)
            if (i == last):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.nind
                _hx_local_2.nind = (_hx_local_3 - 1)
                _hx_local_3
                if self.pretty:
                    self.buf.b.write("".join(map(chr,[10])))
                if self.pretty:
                    self.buf.b.write(Std.string(StringTools.lpad("",self.indent,(self.nind * len(self.indent)))))
        self.buf.b.write("".join(map(chr,[125])))

    def quote(self,s):
        self.buf.b.write("".join(map(chr,[34])))
        i = 0
        while True:
            index = i
            i = (i + 1)
            c = (-1 if ((index >= len(s))) else ord(s[index]))
            if (c == -1):
                break
            if (c == 8):
                self.buf.b.write("\\b")
            elif (c == 9):
                self.buf.b.write("\\t")
            elif (c == 10):
                self.buf.b.write("\\n")
            elif (c == 12):
                self.buf.b.write("\\f")
            elif (c == 13):
                self.buf.b.write("\\r")
            elif (c == 34):
                self.buf.b.write("\\\"")
            elif (c == 92):
                self.buf.b.write("\\\\")
            else:
                self.buf.b.write("".join(map(chr,[c])))
        self.buf.b.write("".join(map(chr,[34])))

    @staticmethod
    def print(o,replacer = None,space = None):
        printer = haxe_format_JsonPrinter(replacer, space)
        printer.write("",o)
        return printer.buf.b.getvalue()

haxe_format_JsonPrinter._hx_class = haxe_format_JsonPrinter


class haxpression__Value_Value_Impl_:
    _hx_class_name = "haxpression._Value.Value_Impl_"
    __slots__ = ()
    _hx_statics = ["NA_STRING", "NM_STRING", "NULL_STRING", "TRUE_STRING", "FALSE_STRING", "_new", "fromDynamic", "fromValueType", "toValueType", "fromFloat", "fromInt", "fromBool", "fromString", "na", "nm", "toFloat", "toInt", "toBool", "toString", "toDynamic", "isInt", "isFloat", "isBool", "isString", "isNumeric", "isNA", "isNM", "isNone", "equals", "stringIsFloat", "stringIsInt"]

    @staticmethod
    def _new(valueType):
        return valueType

    @staticmethod
    def fromDynamic(value):
        if (value is None):
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNA)
        elif Std._hx_is(value,Int):
            return haxpression__Value_Value_Impl_.fromInt(value)
        elif Std._hx_is(value,Float):
            return haxpression__Value_Value_Impl_.fromFloat(value)
        elif Std._hx_is(value,Bool):
            return haxpression__Value_Value_Impl_.fromBool(value)
        elif Std._hx_is(value,str):
            return haxpression__Value_Value_Impl_.fromString(value)
        else:
            raise _HxException(("invalid type for " + Std.string(value)))

    @staticmethod
    def fromValueType(valueType):
        return valueType

    @staticmethod
    def toValueType(this1):
        return this1

    @staticmethod
    def fromFloat(v):
        return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VFloat(v))

    @staticmethod
    def fromInt(v):
        return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VInt(v))

    @staticmethod
    def fromBool(v):
        return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VBool(v))

    @staticmethod
    def fromString(v):
        if haxpression_utils_Strings.isEmpty(v):
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNA)
        vl = v.lower()
        if ((vl == haxpression__Value_Value_Impl_.NULL_STRING) or ((vl == haxpression__Value_Value_Impl_.NA_STRING))):
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNA)
        elif (vl == haxpression__Value_Value_Impl_.NM_STRING):
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNM)
        elif (vl == haxpression__Value_Value_Impl_.TRUE_STRING):
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VBool(True))
        elif (vl == haxpression__Value_Value_Impl_.FALSE_STRING):
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VBool(False))
        elif haxpression__Value_Value_Impl_.stringIsInt(v):
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VInt(Std.parseInt(v)))
        elif haxpression__Value_Value_Impl_.stringIsFloat(v):
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VFloat(Std.parseFloat(v)))
        else:
            return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VString(v))

    @staticmethod
    def na():
        return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNA)

    @staticmethod
    def nm():
        return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNM)

    @staticmethod
    def toFloat(this1):
        if ((this1.index) == 0):
            return this1.params[0]
        elif ((this1.index) == 1):
            return this1.params[0]
        elif ((this1.index) == 2):
            raise _HxException(haxpression_Error("cannot convert Bool to Float"))
        elif ((this1.index) == 3):
            raise _HxException(haxpression_Error("cannot convert String to Float"))
        elif ((this1.index) == 4):
            raise _HxException(haxpression_Error("cannot convert NA to Float"))
        elif ((this1.index) == 5):
            raise _HxException(haxpression_Error("cannot convert NM to Float"))
        else:
            pass

    @staticmethod
    def toInt(this1):
        if ((this1.index) == 0):
            v = this1.params[0]
            tmp = None
            try:
                tmp = int(v)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                tmp = None
            return tmp
        elif ((this1.index) == 1):
            return this1.params[0]
        elif ((this1.index) == 2):
            raise _HxException(haxpression_Error("cannot convert Bool to Int"))
        elif ((this1.index) == 3):
            raise _HxException(haxpression_Error("cannot convert String to Int"))
        elif ((this1.index) == 4):
            raise _HxException(haxpression_Error("cannot convert NA to Int"))
        elif ((this1.index) == 5):
            raise _HxException(haxpression_Error("cannot convert NM to Int"))
        else:
            pass

    @staticmethod
    def toBool(this1):
        if ((this1.index) == 0):
            return (this1.params[0] != 0.0)
        elif ((this1.index) == 1):
            return (this1.params[0] != 0)
        elif ((this1.index) == 2):
            return this1.params[0]
        elif ((this1.index) == 3):
            return (this1.params[0].lower() == haxpression__Value_Value_Impl_.TRUE_STRING)
        elif ((this1.index) == 4):
            raise _HxException(haxpression_Error("cannot convert NA to Bool"))
        elif ((this1.index) == 5):
            raise _HxException(haxpression_Error("cannot convert NM to Bool"))
        else:
            pass

    @staticmethod
    def toString(this1):
        if ((this1.index) == 0):
            return Std.string(this1.params[0])
        elif ((this1.index) == 1):
            return Std.string(this1.params[0])
        elif ((this1.index) == 2):
            if this1.params[0]:
                return haxpression__Value_Value_Impl_.TRUE_STRING
            else:
                return haxpression__Value_Value_Impl_.FALSE_STRING
        elif ((this1.index) == 3):
            return this1.params[0]
        elif ((this1.index) == 4):
            return haxpression__Value_Value_Impl_.NA_STRING.upper()
        elif ((this1.index) == 5):
            return haxpression__Value_Value_Impl_.NM_STRING.upper()
        else:
            pass

    @staticmethod
    def toDynamic(this1):
        if ((this1.index) == 0):
            return this1.params[0]
        elif ((this1.index) == 1):
            return this1.params[0]
        elif ((this1.index) == 2):
            return this1.params[0]
        elif ((this1.index) == 3):
            return this1.params[0]
        elif ((this1.index) == 4):
            return "NA"
        elif ((this1.index) == 5):
            return "NM"
        else:
            pass

    @staticmethod
    def isInt(this1,test = None):
        if (this1.index == 1):
            v = this1.params[0]
            if (test is not None):
                return (test == v)
            else:
                return True
        else:
            return False

    @staticmethod
    def isFloat(this1,test = None):
        if (this1.index == 0):
            v = this1.params[0]
            if (test is not None):
                return (test == v)
            else:
                return True
        else:
            return False

    @staticmethod
    def isBool(this1,test = None):
        if (this1.index == 2):
            v = this1.params[0]
            if (test is not None):
                return (test == v)
            else:
                return True
        else:
            return False

    @staticmethod
    def isString(this1,test = None):
        if (this1.index == 3):
            v = this1.params[0]
            if (test is not None):
                return (test == v)
            else:
                return True
        else:
            return False

    @staticmethod
    def isNumeric(this1,test = None):
        if ((this1.index) == 0):
            v = this1.params[0]
            if (test is not None):
                return (test == v)
            else:
                return True
        elif ((this1.index) == 1):
            v1 = this1.params[0]
            if (test is not None):
                return (test == v1)
            else:
                return True
        else:
            return False

    @staticmethod
    def isNA(this1):
        if (this1.index == 4):
            return True
        else:
            return False

    @staticmethod
    def isNM(this1):
        if (this1.index == 5):
            return True
        else:
            return False

    @staticmethod
    def isNone(this1):
        if (not haxpression__Value_Value_Impl_.isNA(this1)):
            return haxpression__Value_Value_Impl_.isNM(this1)
        else:
            return True

    @staticmethod
    def equals(this1,other):
        _g = haxpression__Value_Value_Impl_.toValueType(other)
        if ((this1.index) == 0):
            if ((_g.index) == 0):
                return (this1.params[0] == _g.params[0])
            elif ((_g.index) == 1):
                return (this1.params[0] == _g.params[0])
            else:
                return False
        elif ((this1.index) == 1):
            if ((_g.index) == 0):
                value = this1.params[0]
                other1 = _g.params[0]
                tmp = None
                try:
                    tmp = int(other1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    tmp = None
                return (value == tmp)
            elif ((_g.index) == 1):
                return (this1.params[0] == _g.params[0])
            else:
                return False
        elif ((this1.index) == 2):
            if (_g.index == 2):
                return (this1.params[0] == _g.params[0])
            else:
                return False
        elif ((this1.index) == 3):
            if (_g.index == 3):
                return (this1.params[0] == _g.params[0])
            else:
                return False
        elif ((this1.index) == 4):
            if (_g.index == 4):
                return True
            else:
                return False
        elif ((this1.index) == 5):
            if (_g.index == 5):
                return True
            else:
                return False
        else:
            pass

    @staticmethod
    def stringIsFloat(input):
        if haxpression_utils_Strings.isEmpty(input):
            return False
        _this = EReg("^[+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?$", "")
        _this.matchObj = python_lib_Re.search(_this.pattern,input)
        return (_this.matchObj is not None)

    @staticmethod
    def stringIsInt(input):
        _this = EReg("^\\d+$", "")
        _this.matchObj = python_lib_Re.search(_this.pattern,input)
        return (_this.matchObj is not None)
haxpression__Value_Value_Impl_._hx_class = haxpression__Value_Value_Impl_

class haxpression_ValueType(Enum):
    __slots__ = ()
    _hx_class_name = "haxpression.ValueType"
    _hx_constructs = ["VFloat", "VInt", "VBool", "VString", "VNA", "VNM"]

    @staticmethod
    def VFloat(v):
        return haxpression_ValueType("VFloat", 0, [v])

    @staticmethod
    def VInt(v):
        return haxpression_ValueType("VInt", 1, [v])

    @staticmethod
    def VBool(v):
        return haxpression_ValueType("VBool", 2, [v])

    @staticmethod
    def VString(v):
        return haxpression_ValueType("VString", 3, [v])
haxpression_ValueType.VNA = haxpression_ValueType("VNA", 4, list())
haxpression_ValueType.VNM = haxpression_ValueType("VNM", 5, list())
haxpression_ValueType._hx_class = haxpression_ValueType


class haxpression_Error:
    _hx_class_name = "haxpression.Error"
    __slots__ = ("message", "expression", "position")
    _hx_fields = ["message", "expression", "position"]
    _hx_methods = ["toString"]

    def __init__(self,message,expression = None,position = None):
        self.message = message
        self.expression = expression
        self.position = position

    def toString(self):
        return ((("" + HxOverrides.stringOrNull(self.message)) + HxOverrides.stringOrNull(((((" in expression: \"" + HxOverrides.stringOrNull(self.expression)) + "\"") if ((self.expression is not None)) else "")))) + HxOverrides.stringOrNull((((" at position: " + Std.string(self.position)) if ((self.position is not None)) else ""))))

haxpression_Error._hx_class = haxpression_Error


class haxpression_BinaryOperations:
    _hx_class_name = "haxpression.BinaryOperations"
    __slots__ = ()
    _hx_statics = ["map", "evaluate", "addOperator", "removeOperator", "hasOperator", "clearOperators", "getOperatorPrecedence", "getMaxOperatorLength", "wrapOperation"]
    map = None

    @staticmethod
    def evaluate(operator,left,right):
        return haxpression_BinaryOperations.map.h.get(operator,None).operation(left,right)

    @staticmethod
    def addOperator(operator,precedence,operation):
        haxpression_BinaryOperations.map.h[operator] = _hx_AnonObject({'precedence': precedence, 'operation': haxpression_BinaryOperations.wrapOperation(operation)})

    @staticmethod
    def removeOperator(operator):
        haxpression_BinaryOperations.map.remove(operator)

    @staticmethod
    def hasOperator(operator):
        return operator in haxpression_BinaryOperations.map.h

    @staticmethod
    def clearOperators():
        haxpression_BinaryOperations.map = haxe_ds_StringMap()

    @staticmethod
    def getOperatorPrecedence(operator):
        return haxpression_BinaryOperations.map.h.get(operator,None).precedence

    @staticmethod
    def getMaxOperatorLength():
        def _hx_local_1():
            def _hx_local_0(maxLength,key):
                if (len(key) > maxLength):
                    return len(key)
                else:
                    return maxLength
            return haxpression_utils_Arrays.reduce(haxpression_utils_Iterators.toArray(haxpression_BinaryOperations.map.keys()),_hx_local_0,0)
        return _hx_local_1()

    @staticmethod
    def wrapOperation(operation):
        def _hx_local_0(left,right):
            if (haxpression__Value_Value_Impl_.isNA(left) or haxpression__Value_Value_Impl_.isNA(right)):
                return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNA)
            elif (haxpression__Value_Value_Impl_.isNM(left) or haxpression__Value_Value_Impl_.isNM(right)):
                return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNM)
            else:
                return operation(left,right)
        return _hx_local_0
haxpression_BinaryOperations._hx_class = haxpression_BinaryOperations


class haxpression_CallOperations:
    _hx_class_name = "haxpression.CallOperations"
    __slots__ = ()
    _hx_statics = ["map", "addFunction", "removeFunction", "hasFunction", "getFunction", "getArity", "canEvaluate", "clearFunctions", "evaluate", "wrapOperation"]
    map = None

    @staticmethod
    def addFunction(callee,arity,operation):
        haxpression_CallOperations.map.h[callee] = _hx_AnonObject({'arity': arity, 'operation': haxpression_CallOperations.wrapOperation(callee,arity,operation)})

    @staticmethod
    def removeFunction(callee):
        haxpression_CallOperations.map.remove(callee)

    @staticmethod
    def hasFunction(callee):
        return callee in haxpression_CallOperations.map.h

    @staticmethod
    def getFunction(callee):
        if (not haxpression_CallOperations.hasFunction(callee)):
            raise _HxException(haxpression_Error(("no function implementation found for name: " + ("null" if callee is None else callee))))
        return haxpression_CallOperations.map.h.get(callee,None).operation

    @staticmethod
    def getArity(callee):
        if (not haxpression_CallOperations.hasFunction(callee)):
            raise _HxException(haxpression_Error(("no function implementation found for name: " + ("null" if callee is None else callee))))
        return haxpression_CallOperations.map.h.get(callee,None).arity

    @staticmethod
    def canEvaluate(callee,arguments):
        if (not haxpression_CallOperations.hasFunction(callee)):
            return False
        arity = haxpression_CallOperations.getArity(callee)
        if ((arity >= 0) and ((arity != len(arguments)))):
            return False
        return haxpression_ExpressionTypes.canEvaluateAll(arguments)

    @staticmethod
    def clearFunctions():
        haxpression_CallOperations.map = haxe_ds_StringMap()

    @staticmethod
    def evaluate(callee,arguments):
        return haxpression_CallOperations.getFunction(callee)(arguments)

    @staticmethod
    def wrapOperation(callee,arity,operation):
        def _hx_local_0(arguments):
            if ((arity >= 0) and ((len(arguments) != arity))):
                raise _HxException(haxpression_Error((((("function " + ("null" if callee is None else callee)) + " expects exactly ") + Std.string(arity)) + " argument(s)")))
            return operation(arguments)
        return _hx_local_0
haxpression_CallOperations._hx_class = haxpression_CallOperations


class haxpression_Config:
    _hx_class_name = "haxpression.Config"
    __slots__ = ()
    _hx_statics = ["useCloneForExpressions", "useCloneForExpressionGroups"]
haxpression_Config._hx_class = haxpression_Config


class haxpression__Expression_Expression_Impl_:
    _hx_class_name = "haxpression._Expression.Expression_Impl_"
    __slots__ = ()
    _hx_statics = ["_new", "fromExpressionType", "toExpressionType", "fromString", "fromStringLiteral", "fromInt", "fromFloat", "fromBool", "toString", "toDynamic", "toObject", "hasVariables", "hasVariablesStartingWith", "hasVariablesContaining", "hasVariablesEndingWith", "hasVariablesWithin", "getVariables", "clone", "substitute", "simplify", "canEvaluate", "evaluate", "isLiteral", "isIdentifier", "isCompound", "accumulateVariables", "getString", "getStringDelimited"]

    @staticmethod
    def _new(expressionType):
        return expressionType

    @staticmethod
    def fromExpressionType(expressionType):
        return expressionType

    @staticmethod
    def toExpressionType(this1):
        return this1

    @staticmethod
    def fromString(input):
        return haxpression_Parser.parse(input)

    @staticmethod
    def fromStringLiteral(input):
        return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression__Value_Value_Impl_.toValueType(haxpression__Value_Value_Impl_.fromString(input))))

    @staticmethod
    def fromInt(input):
        return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression__Value_Value_Impl_.toValueType(haxpression__Value_Value_Impl_.fromInt(input))))

    @staticmethod
    def fromFloat(input):
        return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression__Value_Value_Impl_.toValueType(haxpression__Value_Value_Impl_.fromFloat(input))))

    @staticmethod
    def fromBool(input):
        return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression__Value_Value_Impl_.toValueType(haxpression__Value_Value_Impl_.fromBool(input))))

    @staticmethod
    def toString(this1):
        if ((this1.index) == 0):
            return haxpression__Value_Value_Impl_.toString(this1.params[0])
        elif ((this1.index) == 1):
            return this1.params[0]
        elif ((this1.index) == 2):
            return (("" + HxOverrides.stringOrNull(this1.params[0])) + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.getString(this1,this1.params[1])))
        elif ((this1.index) == 3):
            return (((((("(" + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.getString(this1,this1.params[1]))) + " ") + HxOverrides.stringOrNull(this1.params[0])) + " ") + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.getString(this1,this1.params[2]))) + ")")
        elif ((this1.index) == 4):
            return (((("" + HxOverrides.stringOrNull(this1.params[0])) + "(") + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.getStringDelimited(this1,this1.params[1],","))) + ")")
        elif ((this1.index) == 5):
            return (((((("(" + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.getString(this1,this1.params[0]))) + " ? ") + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.getString(this1,this1.params[1]))) + " : ") + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.getString(this1,this1.params[2]))) + ")")
        elif ((this1.index) == 6):
            return (("[" + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.getStringDelimited(this1,this1.params[0],","))) + "]")
        elif ((this1.index) == 7):
            return haxpression__Expression_Expression_Impl_.getStringDelimited(this1,this1.params[0],";")
        else:
            pass

    @staticmethod
    def toDynamic(this1):
        if (this1.index == 0):
            return haxpression__Value_Value_Impl_.toDynamic(this1.params[0])
        else:
            return haxpression__Expression_Expression_Impl_.toString(this1)

    @staticmethod
    def toObject(this1):
        if ((this1.index) == 0):
            return _hx_AnonObject({'type': "Literal", 'value': haxpression__Value_Value_Impl_.toDynamic(this1.params[0])})
        elif ((this1.index) == 1):
            return _hx_AnonObject({'type': "Identifier", 'name': this1.params[0]})
        elif ((this1.index) == 2):
            return _hx_AnonObject({'type': "Unary", 'operator': this1.params[0], 'operand': haxpression__Expression_Expression_Impl_.toObject(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]))})
        elif ((this1.index) == 3):
            return _hx_AnonObject({'type': "Binary", 'operator': this1.params[0], 'left': haxpression__Expression_Expression_Impl_.toObject(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1])), 'right': haxpression__Expression_Expression_Impl_.toObject(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2]))})
        elif ((this1.index) == 4):
            return _hx_AnonObject({'type': "Call", 'callee': this1.params[0], 'arguments': haxpression_ExpressionTypes.toObject(this1.params[1])})
        elif ((this1.index) == 5):
            return _hx_AnonObject({'type': "Conditional", 'test': haxpression__Expression_Expression_Impl_.toObject(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[0])), 'consequent': haxpression__Expression_Expression_Impl_.toObject(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1])), 'alternate': haxpression__Expression_Expression_Impl_.toObject(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2]))})
        elif ((this1.index) == 6):
            return _hx_AnonObject({'type': "Array", 'items': haxpression_ExpressionTypes.toObject(this1.params[0])})
        elif ((this1.index) == 7):
            return _hx_AnonObject({'type': "Compound", 'items': haxpression_ExpressionTypes.toObject(this1.params[0])})
        else:
            pass

    @staticmethod
    def hasVariables(this1):
        return (len(haxpression__Expression_Expression_Impl_.getVariables(this1)) > 0)

    @staticmethod
    def hasVariablesStartingWith(this1,text):
        def _hx_local_1():
            def _hx_local_0(variable):
                return StringTools.startsWith(variable,text)
            return haxpression_utils_Arrays.any(haxpression__Expression_Expression_Impl_.getVariables(this1),_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def hasVariablesContaining(this1,text):
        def _hx_local_1():
            def _hx_local_0(variable):
                return haxpression_utils_Strings.contains(variable,text)
            return haxpression_utils_Arrays.any(haxpression__Expression_Expression_Impl_.getVariables(this1),_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def hasVariablesEndingWith(this1,text):
        def _hx_local_1():
            def _hx_local_0(variable):
                return StringTools.endsWith(variable,text)
            return haxpression_utils_Arrays.any(haxpression__Expression_Expression_Impl_.getVariables(this1),_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def hasVariablesWithin(this1,variables):
        def _hx_local_1():
            def _hx_local_0(variable):
                return haxpression_utils_Arrays.contains(variables,variable)
            return haxpression_utils_Arrays.all(haxpression__Expression_Expression_Impl_.getVariables(this1),_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def getVariables(this1,options = None):
        if (options is None):
            options = _hx_AnonObject({})
        if (Reflect.field(options,"sort") is None):
            Reflect.setField(options,"sort",True)
        variables = []
        haxpression__Expression_Expression_Impl_.accumulateVariables(this1,variables)
        if Reflect.field(options,"sort"):
            def _hx_local_0(a,b):
                a = a.lower()
                b = b.lower()
                if (a > b):
                    return 1
                elif (a < b):
                    return -1
                else:
                    return 0
            variables.sort(key= python_lib_Functools.cmp_to_key(_hx_local_0))
        return variables

    @staticmethod
    def clone(this1):
        if (not haxpression_Config.useCloneForExpressions):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(this1)
        if ((this1.index) == 0):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(this1.params[0]))
        elif ((this1.index) == 1):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EIdentifier(this1.params[0]))
        elif ((this1.index) == 2):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EUnary(this1.params[0],haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.clone(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1])))))
        elif ((this1.index) == 3):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EBinary(this1.params[0],haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.clone(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]))),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.clone(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2])))))
        elif ((this1.index) == 4):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ECall(this1.params[0],haxpression_ExpressionTypes.clone(this1.params[1])))
        elif ((this1.index) == 5):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EConditional(haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.clone(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[0]))),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.clone(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]))),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.clone(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2])))))
        elif ((this1.index) == 6):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EArray(haxpression_ExpressionTypes.clone(this1.params[0])))
        elif ((this1.index) == 7):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ECompound(haxpression_ExpressionTypes.clone(this1.params[0])))
        else:
            pass

    @staticmethod
    def substitute(this1,variables):
        if ((this1.index) == 0):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(this1.params[0]))
        elif ((this1.index) == 1):
            name = this1.params[0]
            if name in variables.h:
                return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toExpression(variables.h.get(name,None))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EIdentifier(name))
        elif ((this1.index) == 2):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EUnary(this1.params[0],haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.substitute(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]),variables))))
        elif ((this1.index) == 3):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EBinary(this1.params[0],haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.substitute(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]),variables)),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.substitute(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2]),variables))))
        elif ((this1.index) == 4):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ECall(this1.params[0],haxpression_ExpressionTypes.substitute(this1.params[1],variables)))
        elif ((this1.index) == 5):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EConditional(haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.substitute(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[0]),variables)),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.substitute(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]),variables)),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.substitute(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2]),variables))))
        elif ((this1.index) == 6):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EArray(haxpression_ExpressionTypes.substitute(this1.params[0],variables)))
        elif ((this1.index) == 7):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EArray(haxpression_ExpressionTypes.substitute(this1.params[0],variables)))
        else:
            pass

    @staticmethod
    def simplify(this1):
        if ((this1.index) == 0):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(this1.params[0]))
        elif ((this1.index) == 1):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EIdentifier(this1.params[0]))
        elif ((this1.index) == 2):
            operand = this1.params[1]
            operator = this1.params[0]
            if haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(operand)):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression__Value_Value_Impl_.toValueType(haxpression_UnaryOperations.evaluate(operator,haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(operand))))))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EUnary(operator,haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(operand)))))
        elif ((this1.index) == 3):
            right = this1.params[2]
            left = this1.params[1]
            operator1 = this1.params[0]
            if (haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(left)) and haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(right))):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression__Value_Value_Impl_.toValueType(haxpression_BinaryOperations.evaluate(operator1,haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(left)),haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(right))))))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EBinary(operator1,haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(left))),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(right)))))
        elif ((this1.index) == 4):
            arguments = this1.params[1]
            callee = this1.params[0]
            if haxpression_ExpressionTypes.canEvaluateAll(arguments):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression__Value_Value_Impl_.toValueType(haxpression_CallOperations.evaluate(callee,haxpression_ExpressionTypes.evaluate(arguments)))))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ECall(callee,haxpression_ExpressionTypes.simplify(arguments)))
        elif ((this1.index) == 5):
            alternate = this1.params[2]
            consequent = this1.params[1]
            test = this1.params[0]
            if haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(test)):
                if haxpression__Value_Value_Impl_.toBool(haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(test))):
                    return haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(consequent))
                else:
                    return haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(alternate))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EConditional(haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(test))),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(consequent))),haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(alternate)))))
        elif ((this1.index) == 6):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EArray(haxpression_ExpressionTypes.simplify(this1.params[0])))
        elif ((this1.index) == 7):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ECompound(haxpression_ExpressionTypes.simplify(this1.params[0])))
        else:
            pass

    @staticmethod
    def canEvaluate(this1):
        if ((this1.index) == 0):
            return True
        elif ((this1.index) == 1):
            return False
        elif ((this1.index) == 2):
            return haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]))
        elif ((this1.index) == 3):
            right = this1.params[2]
            if haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1])):
                return haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(right))
            else:
                return False
        elif ((this1.index) == 4):
            return haxpression_CallOperations.canEvaluate(this1.params[0],this1.params[1])
        elif ((this1.index) == 5):
            alternate = this1.params[2]
            consequent = this1.params[1]
            test = this1.params[0]
            if (not haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(test))):
                return False
            elif haxpression__Value_Value_Impl_.toBool(haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(test))):
                return haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(consequent))
            else:
                return haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(alternate))
        elif ((this1.index) == 6):
            return haxpression_ExpressionTypes.canEvaluateAll(this1.params[0])
        elif ((this1.index) == 7):
            return haxpression_ExpressionTypes.canEvaluateAll(this1.params[0])
        else:
            pass

    @staticmethod
    def evaluate(this1,variables = None):
        if (variables is None):
            variables = haxe_ds_StringMap()
        if ((this1.index) == 0):
            return haxpression__Value_Value_Impl_.fromValueType(this1.params[0])
        elif ((this1.index) == 1):
            name = this1.params[0]
            if (not name in variables.h):
                raise _HxException(haxpression_Error(("cannot evaluate expression with unset variable: " + ("null" if name is None else name))))
            return variables.h.get(name,None)
        elif ((this1.index) == 2):
            return haxpression_UnaryOperations.evaluate(this1.params[0],haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]),variables))
        elif ((this1.index) == 3):
            return haxpression_BinaryOperations.evaluate(this1.params[0],haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]),variables),haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2]),variables))
        elif ((this1.index) == 4):
            return haxpression_CallOperations.evaluate(this1.params[0],haxpression_ExpressionTypes.evaluate(this1.params[1],variables))
        elif ((this1.index) == 5):
            alternate = this1.params[2]
            consequent = this1.params[1]
            if haxpression__Value_Value_Impl_.toBool(haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[0]),variables)):
                return haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(consequent),variables)
            else:
                return haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(alternate),variables)
        elif ((this1.index) == 6):
            items = this1.params[0]
            if (len(items) == 0):
                return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNA)
            else:
                values = haxpression_ExpressionTypes.evaluate(items,variables)
                return python_internal_ArrayImpl._get(values, (len(values) - 1))
        elif ((this1.index) == 7):
            items1 = this1.params[0]
            if (len(items1) == 0):
                return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNA)
            else:
                values1 = haxpression_ExpressionTypes.evaluate(items1,variables)
                return python_internal_ArrayImpl._get(values1, (len(values1) - 1))
        else:
            pass

    @staticmethod
    def isLiteral(this1,value = None):
        _g = haxpression__Value_Value_Impl_.toValueType(value)
        _g1 = haxpression__Expression_Expression_Impl_.toExpressionType(this1)
        if (_g1.index == 0):
            if ((_g1.params[0].index) == 0):
                if (_g.index == 0):
                    return (_g1.params[0].params[0] == _g.params[0])
                else:
                    return False
            elif ((_g1.params[0].index) == 1):
                if (_g.index == 1):
                    return (_g1.params[0].params[0] == _g.params[0])
                else:
                    return False
            elif ((_g1.params[0].index) == 2):
                if (_g.index == 2):
                    return (_g1.params[0].params[0] == _g.params[0])
                else:
                    return False
            elif ((_g1.params[0].index) == 3):
                if (_g.index == 3):
                    return (_g1.params[0].params[0] == _g.params[0])
                else:
                    return False
            else:
                return False
        else:
            return False

    @staticmethod
    def isIdentifier(this1,name = None):
        _g = haxpression__Expression_Expression_Impl_.toExpressionType(this1)
        if (_g.index == 1):
            n = _g.params[0]
            if (name is not None):
                return (name == n)
            else:
                return True
        else:
            return False

    @staticmethod
    def isCompound(this1):
        if (haxpression__Expression_Expression_Impl_.toExpressionType(this1).index == 7):
            return True
        else:
            return False

    @staticmethod
    def accumulateVariables(this1,variables):
        if ((this1.index) == 0):
            pass
        elif ((this1.index) == 1):
            name = this1.params[0]
            if (python_internal_ArrayImpl.indexOf(variables,name,None) == -1):
                variables.append(name)
        elif ((this1.index) == 2):
            haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]),variables)
        elif ((this1.index) == 3):
            haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]),variables)
            haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2]),variables)
        elif ((this1.index) == 4):
            def _hx_local_0(expression):
                haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(expression),variables)
            haxpression_utils_Arrays.each(this1.params[1],_hx_local_0)
        elif ((this1.index) == 5):
            haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[0]),variables)
            haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[1]),variables)
            haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(this1.params[2]),variables)
        elif ((this1.index) == 6):
            def _hx_local_1(expression1):
                haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(expression1),variables)
            haxpression_utils_Arrays.each(this1.params[0],_hx_local_1)
        elif ((this1.index) == 7):
            def _hx_local_2(expression2):
                haxpression__Expression_Expression_Impl_.accumulateVariables(haxpression__Expression_Expression_Impl_.fromExpressionType(expression2),variables)
            haxpression_utils_Arrays.each(this1.params[0],_hx_local_2)
        else:
            pass

    @staticmethod
    def getString(this1,expressionType):
        return haxpression__Expression_Expression_Impl_.toString(haxpression__Expression_Expression_Impl_.fromExpressionType(expressionType))

    @staticmethod
    def getStringDelimited(this1,expressionTypes,delimiter):
        delimiter = (("" + HxOverrides.stringOrNull(StringTools.trim(delimiter))) + " ")
        _e = this1
        def _hx_local_0(expressionType):
            return haxpression__Expression_Expression_Impl_.getString(_e,expressionType)
        _this = list(map(_hx_local_0,expressionTypes))
        return delimiter.join([python_Boot.toString1(x1,'') for x1 in _this])
haxpression__Expression_Expression_Impl_._hx_class = haxpression__Expression_Expression_Impl_


class haxpression_ExpressionGroup:
    _hx_class_name = "haxpression.ExpressionGroup"
    __slots__ = ("variableMap",)
    _hx_fields = ["variableMap"]
    _hx_methods = ["clone", "hasVariable", "getVariables", "getExternalVariables", "getExpressionOrValue", "getExpression", "getValue", "setVariable", "setVariables", "setVariableValues", "removeVariable", "substitute", "simplify", "canExpand", "expand", "canExpandExpressionForVariable", "expandExpressionForVariable", "canEvaluate", "evaluate", "evaluateExpressionForVariable", "toValueMap", "toObject", "toString", "all", "any", "map", "reduce", "getVariableDependencyGraph", "getDependencySortedVariables", "getEvaluationInfo"]
    _hx_statics = ["fromFallbackMap"]

    def __init__(self,variableMap = None):
        self.variableMap = (variableMap if ((variableMap is not None)) else haxe_ds_StringMap())

    def clone(self):
        if (not haxpression_Config.useCloneForExpressionGroups):
            return self
        def _hx_local_1():
            def _hx_local_0(variable,expressionOrValue):
                return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromExpression(haxpression__Expression_Expression_Impl_.clone(haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toExpression(expressionOrValue)))
            return self.map(_hx_local_0)
        return _hx_local_1()

    def hasVariable(self,variable):
        return variable in self.variableMap.h

    def getVariables(self,includeExpressionVariables = False):
        if (includeExpressionVariables is None):
            includeExpressionVariables = False
        _gthis = self
        def _hx_local_1(variables1,variable):
            if (not haxpression_utils_Arrays.contains(variables1,variable)):
                variables1.append(variable)
            if includeExpressionVariables:
                _g = 0
                _g1 = haxpression__Expression_Expression_Impl_.getVariables(_gthis.getExpression(variable))
                while (_g < len(_g1)):
                    expressionVariable = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    if (not haxpression_utils_Arrays.contains(variables1,expressionVariable)):
                        variables1.append(expressionVariable)
            return variables1
        variables = haxpression_utils_Arrays.reduce(haxpression_utils_Iterators.toArray(self.variableMap.keys()),_hx_local_1,[])
        variables.sort(key= python_lib_Functools.cmp_to_key(haxpression_utils_Strings.icompare))
        return variables

    def getExternalVariables(self,forVariables = None):
        _gthis = self
        if (forVariables is None):
            forVariables = self.getVariables(True)
        accExternalVariables = None
        def _hx_local_1(acc,variable):
            if (not _gthis.hasVariable(variable)):
                if (not haxpression_utils_Arrays.contains(acc,variable)):
                    acc.append(variable)
                return acc
            expressionVariables = haxpression__Expression_Expression_Impl_.getVariables(_gthis.getExpression(variable))
            _g = 0
            while (_g < len(expressionVariables)):
                expressionVariable = (expressionVariables[_g] if _g >= 0 and _g < len(expressionVariables) else None)
                _g = (_g + 1)
                acc = accExternalVariables(acc,expressionVariable)
            return acc
        accExternalVariables = _hx_local_1
        return haxpression_utils_Arrays.reduce(forVariables,accExternalVariables,[])

    def getExpressionOrValue(self,variable):
        if (not self.hasVariable(variable)):
            raise _HxException(haxpression_Error((("variable " + ("null" if variable is None else variable)) + " is not defined in this expression group")))
        return self.variableMap.h.get(variable,None)

    def getExpression(self,variable):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toExpression(self.getExpressionOrValue(variable))

    def getValue(self,variable):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toValue(self.getExpressionOrValue(variable))

    def setVariable(self,variable,expressionOrValue):
        result = self.clone()
        result.variableMap.h[variable] = expressionOrValue
        return result

    def setVariables(self,expressionOrValueMap):
        expressionGroup = self.clone()
        tmp = expressionOrValueMap.keys()
        while tmp.hasNext():
            variable = tmp.next()
            if expressionGroup.hasVariable(variable):
                raise _HxException(haxpression_Error((("variable " + ("null" if variable is None else variable)) + " is already defined in expression group")))
            expressionGroup.variableMap.h[variable] = expressionOrValueMap.h.get(variable,None)
        return expressionGroup

    def setVariableValues(self,valueMap):
        def _hx_local_1():
            def _hx_local_0(key,value):
                return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromValue(value)
            return self.setVariables(haxpression_utils_Maps.mapValues(valueMap,_hx_local_0,haxe_ds_StringMap()))
        return _hx_local_1()

    def removeVariable(self,variable):
        expressionGroup = self.clone()
        expressionGroup.variableMap.remove(variable)
        return expressionGroup

    def substitute(self,expressionOrValueMap):
        def _hx_local_1():
            def _hx_local_0(variable,expressionOrValue):
                return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromExpression(haxpression__Expression_Expression_Impl_.substitute(haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toExpression(expressionOrValue),expressionOrValueMap))
            return self.map(_hx_local_0)
        return _hx_local_1()

    def simplify(self):
        def _hx_local_1():
            def _hx_local_0(variable,expressionOrValue):
                return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromExpression(haxpression__Expression_Expression_Impl_.simplify(haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toExpression(expressionOrValue)))
            return self.map(_hx_local_0)
        return _hx_local_1()

    def canExpand(self):
        topLevelVariables = self.getVariables()
        if haxpression_utils_Arrays.isEmpty(topLevelVariables):
            return False
        def _hx_local_1():
            def _hx_local_0(variable,expressionOrValue):
                expressionVariables = haxpression__Expression_Expression_Impl_.getVariables(haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toExpression(expressionOrValue))
                if haxpression_utils_Arrays.isEmpty(expressionVariables):
                    return False
                else:
                    return haxpression_utils_Arrays.containsAny(topLevelVariables,expressionVariables)
            return self.any(_hx_local_0)
        return _hx_local_1()

    def expand(self):
        def _hx_local_1():
            def _hx_local_0(expressionGroup,topLevelVariable):
                if expressionGroup.hasVariable(topLevelVariable):
                    expressionGroup.getExpression(topLevelVariable)
                    return expressionGroup.expandExpressionForVariable(topLevelVariable)
                return expressionGroup
            return haxpression_utils_Arrays.reduce(self.getDependencySortedVariables(),_hx_local_0,self)
        return _hx_local_1()

    def canExpandExpressionForVariable(self,variable):
        expression = self.getExpression(variable)
        if (expression is None):
            return False
        variables = haxpression__Expression_Expression_Impl_.getVariables(expression)
        if (len(variables) == 0):
            return False
        _g = 0
        while (_g < len(variables)):
            variable1 = (variables[_g] if _g >= 0 and _g < len(variables) else None)
            _g = (_g + 1)
            if self.hasVariable(variable1):
                return True
        return False

    def expandExpressionForVariable(self,variable):
        _gthis = self
        group = self.clone()
        while group.canExpandExpressionForVariable(variable):
            expression = group.getExpression(variable)
            def _hx_local_0(expression1,expressionVariable):
                if _gthis.hasVariable(expressionVariable):
                    _g = haxe_ds_StringMap()
                    _g.h[expressionVariable] = haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromExpression(_gthis.getExpression(expressionVariable))
                    expression1 = haxpression__Expression_Expression_Impl_.substitute(expression1,_g)
                return expression1
            expression = haxpression_utils_Arrays.reduce(haxpression__Expression_Expression_Impl_.getVariables(expression),_hx_local_0,expression)
            group = group.setVariable(variable,haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromExpression(expression))
        return group

    def canEvaluate(self):
        def _hx_local_1():
            def _hx_local_0(variable,expressionOrValue):
                return haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toExpression(expressionOrValue))
            return self.all(_hx_local_0)
        return _hx_local_1()

    def evaluate(self,valueMap = None):
        expressionGroup = (self.setVariableValues(valueMap) if ((valueMap is not None)) else self.clone())
        def _hx_local_1():
            def _hx_local_0(expressionGroup1,topLevelVariable):
                expressionGroup1 = expressionGroup1.expandExpressionForVariable(topLevelVariable)
                return expressionGroup1.evaluateExpressionForVariable(topLevelVariable)
            return haxpression_utils_Arrays.reduce(self.getDependencySortedVariables(),_hx_local_0,expressionGroup).toValueMap()
        return _hx_local_1()

    def evaluateExpressionForVariable(self,variable):
        expression = self.getExpression(variable)
        if (not haxpression__Expression_Expression_Impl_.canEvaluate(expression)):
            variables = haxpression__Expression_Expression_Impl_.getVariables(expression)
            raise _HxException(haxpression_Error((((((("cannot evaluate expression group variable: " + ("null" if variable is None else variable)) + " with unset variables ") + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in variables]))) + " (expression: ") + HxOverrides.stringOrNull(haxpression__Expression_Expression_Impl_.toString(expression))) + ")")))
        return self.setVariable(variable,haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromValue(haxpression__Expression_Expression_Impl_.evaluate(expression)))

    def toValueMap(self):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(_hx_map,variable):
                _hx_map.h[variable] = _gthis.getValue(variable)
                return _hx_map
            return haxpression_utils_Arrays.reduce(self.getVariables(),_hx_local_0,haxe_ds_StringMap())
        return _hx_local_1()

    def toObject(self):
        def _hx_local_1():
            def _hx_local_0(acc,variable,expressionOrValue):
                value = haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toDynamic(expressionOrValue)
                setattr(acc,(("_hx_" + variable) if (variable in python_Boot.keywords) else (("_hx_" + variable) if (((((len(variable) > 2) and ((ord(variable[0]) == 95))) and ((ord(variable[1]) == 95))) and ((ord(variable[(len(variable) - 1)]) != 95)))) else variable)),value)
                return acc
            return self.reduce(_hx_local_0,_hx_AnonObject({}))
        return _hx_local_1()

    def toString(self):
        return haxe_format_JsonPrinter.print(self.toObject(),None,"  ")

    def all(self,callback):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(variable):
                return callback(variable,_gthis.variableMap.h.get(variable,None))
            return haxpression_utils_Arrays.all(self.getVariables(),_hx_local_0)
        return _hx_local_1()

    def any(self,callback):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(variable):
                return callback(variable,_gthis.variableMap.h.get(variable,None))
            return haxpression_utils_Arrays.any(self.getVariables(),_hx_local_0)
        return _hx_local_1()

    def map(self,callback):
        newExpressionOrValueMap = haxe_ds_StringMap()
        _g = 0
        _g1 = self.getVariables()
        while (_g < len(_g1)):
            variable = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            newExpressionOrValueMap.h[variable] = callback(variable,self.variableMap.h.get(variable,None))
        return haxpression_ExpressionGroup(newExpressionOrValueMap)

    def reduce(self,callback,acc):
        _g = 0
        _g1 = self.getVariables()
        while (_g < len(_g1)):
            variable = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            acc = callback(acc,variable,self.variableMap.h.get(variable,None))
        return acc

    def getVariableDependencyGraph(self,forVariables = None):
        _gthis = self
        if (forVariables is None):
            forVariables = self.getVariables()
        accVariableDependencyGraph = None
        def _hx_local_1(graph,variable):
            if (not _gthis.hasVariable(variable)):
                return graph
            expressionVariables = haxpression__Expression_Expression_Impl_.getVariables(_gthis.getExpression(variable))
            if (len(expressionVariables) > 0):
                graph.addEdgesTo(graphx__NodeOrValue_NodeOrValue_Impl_.fromValue(variable),graphx__NodeOrValue_NodeOrValue_Impl_.mapValues(expressionVariables))
                _g = 0
                while (_g < len(expressionVariables)):
                    expressionVariable = (expressionVariables[_g] if _g >= 0 and _g < len(expressionVariables) else None)
                    _g = (_g + 1)
                    graph = accVariableDependencyGraph(graph,expressionVariable)
            return graph
        accVariableDependencyGraph = _hx_local_1
        accVariableDependencyGraph1 = accVariableDependencyGraph
        def _hx_local_3():
            def _hx_local_2(graph1,variable1):
                return accVariableDependencyGraph1(graph1,variable1)
            return haxpression_utils_Arrays.reduce(forVariables,_hx_local_2,graphx_StringGraph())
        return _hx_local_3()

    def getDependencySortedVariables(self,forVariables = None):
        return self.getVariableDependencyGraph(forVariables).topologicalSort()

    def getEvaluationInfo(self,forVariables = None):
        group = self.clone()
        if (forVariables is None):
            forVariables = group.getVariables(False)
        result = _hx_AnonObject({'expressions': haxe_ds_StringMap(), 'externalVariables': [], 'sortedComputedVariables': []})
        result.sortedComputedVariables = group.getDependencySortedVariables(forVariables)
        result.externalVariables = group.getExternalVariables(forVariables)
        def _hx_local_0(variable):
            return (not haxpression_utils_Arrays.contains(result.externalVariables,variable))
        result.sortedComputedVariables = list(filter(_hx_local_0,result.sortedComputedVariables))
        _g = 0
        _g1 = result.sortedComputedVariables
        while (_g < len(_g1)):
            computedVariable = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            result.expressions.h[computedVariable] = group.getExpression(computedVariable)
        return result

    @staticmethod
    def fromFallbackMap(_hx_map):
        def _hx_local_2():
            def _hx_local_1(fieldId,expressions):
                if (len(expressions) == 1):
                    return (expressions[0] if 0 < len(expressions) else None)
                def _hx_local_0(expressionOrValue):
                    return haxpression__Expression_Expression_Impl_.toString(haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.toExpression(expressionOrValue))
                _this = list(map(_hx_local_0,expressions))
                return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromString((("COALESCE(" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")"))
            return haxpression_ExpressionGroup(haxpression_utils_Maps.mapValues(_hx_map,_hx_local_1,haxe_ds_StringMap()))
        return _hx_local_2()

haxpression_ExpressionGroup._hx_class = haxpression_ExpressionGroup


class haxpression__ExpressionOrValue_ExpressionOrValue_Impl_:
    _hx_class_name = "haxpression._ExpressionOrValue.ExpressionOrValue_Impl_"
    __slots__ = ()
    _hx_statics = ["_new", "fromEither", "fromExpression", "fromValue", "fromFloat", "fromInt", "fromString", "fromBool", "toEither", "toExpression", "toValue", "toDynamic"]

    @staticmethod
    def _new(either):
        return either

    @staticmethod
    def fromEither(either):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_._new(either)

    @staticmethod
    def fromExpression(expression):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromEither(haxe_ds_Either.Left(expression))

    @staticmethod
    def fromValue(value):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromEither(haxe_ds_Either.Right(value))

    @staticmethod
    def fromFloat(value):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromValue(haxpression__Value_Value_Impl_.fromFloat(value))

    @staticmethod
    def fromInt(value):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromValue(haxpression__Value_Value_Impl_.fromFloat(value))

    @staticmethod
    def fromString(expressionString):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromExpression(haxpression__Expression_Expression_Impl_.fromString(expressionString))

    @staticmethod
    def fromBool(value):
        return haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromValue(haxpression__Value_Value_Impl_.fromBool(value))

    @staticmethod
    def toEither(this1):
        return this1

    @staticmethod
    def toExpression(this1):
        if ((this1.index) == 0):
            return this1.params[0]
        elif ((this1.index) == 1):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression__Value_Value_Impl_.toValueType(this1.params[0])))
        else:
            pass

    @staticmethod
    def toValue(this1):
        if ((this1.index) == 0):
            return haxpression__Expression_Expression_Impl_.evaluate(this1.params[0])
        elif ((this1.index) == 1):
            return this1.params[0]
        else:
            pass

    @staticmethod
    def toDynamic(this1):
        if ((this1.index) == 0):
            return haxpression__Expression_Expression_Impl_.toDynamic(this1.params[0])
        elif ((this1.index) == 1):
            return haxpression__Value_Value_Impl_.toDynamic(this1.params[0])
        else:
            pass
haxpression__ExpressionOrValue_ExpressionOrValue_Impl_._hx_class = haxpression__ExpressionOrValue_ExpressionOrValue_Impl_

class haxpression_ExpressionType(Enum):
    __slots__ = ()
    _hx_class_name = "haxpression.ExpressionType"
    _hx_constructs = ["ELiteral", "EIdentifier", "EUnary", "EBinary", "ECall", "EConditional", "EArray", "ECompound"]

    @staticmethod
    def ELiteral(value):
        return haxpression_ExpressionType("ELiteral", 0, [value])

    @staticmethod
    def EIdentifier(name):
        return haxpression_ExpressionType("EIdentifier", 1, [name])

    @staticmethod
    def EUnary(operator,operand):
        return haxpression_ExpressionType("EUnary", 2, [operator,operand])

    @staticmethod
    def EBinary(operator,left,right):
        return haxpression_ExpressionType("EBinary", 3, [operator,left,right])

    @staticmethod
    def ECall(callee,arguments):
        return haxpression_ExpressionType("ECall", 4, [callee,arguments])

    @staticmethod
    def EConditional(test,consequent,alternate):
        return haxpression_ExpressionType("EConditional", 5, [test,consequent,alternate])

    @staticmethod
    def EArray(items):
        return haxpression_ExpressionType("EArray", 6, [items])

    @staticmethod
    def ECompound(items):
        return haxpression_ExpressionType("ECompound", 7, [items])
haxpression_ExpressionType._hx_class = haxpression_ExpressionType


class haxpression_ExpressionTypes:
    _hx_class_name = "haxpression.ExpressionTypes"
    __slots__ = ()
    _hx_statics = ["clone", "canEvaluateAll", "simplify", "evaluate", "substitute", "toObject"]

    @staticmethod
    def clone(expressionTypes):
        def _hx_local_1():
            def _hx_local_0(expressionType):
                return haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.clone(haxpression__Expression_Expression_Impl_.fromExpressionType(expressionType)))
            return list(map(_hx_local_0,expressionTypes))
        return _hx_local_1()

    @staticmethod
    def canEvaluateAll(expressionTypes):
        def _hx_local_1():
            def _hx_local_0(expressionType):
                return haxpression__Expression_Expression_Impl_.canEvaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(expressionType))
            return haxpression_utils_Arrays.all(expressionTypes,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def simplify(expressionTypes):
        def _hx_local_1():
            def _hx_local_0(expressionType):
                return haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.simplify(haxpression__Expression_Expression_Impl_.fromExpressionType(expressionType)))
            return list(map(_hx_local_0,expressionTypes))
        return _hx_local_1()

    @staticmethod
    def evaluate(expressionTypes,variables = None):
        def _hx_local_1():
            def _hx_local_0(expressionType):
                return haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromExpressionType(expressionType),variables)
            return list(map(_hx_local_0,expressionTypes))
        return _hx_local_1()

    @staticmethod
    def substitute(expressionTypes,variables):
        def _hx_local_1():
            def _hx_local_0(expressionType):
                return haxpression__Expression_Expression_Impl_.toExpressionType(haxpression__Expression_Expression_Impl_.substitute(haxpression__Expression_Expression_Impl_.fromExpressionType(expressionType),variables))
            return list(map(_hx_local_0,expressionTypes))
        return _hx_local_1()

    @staticmethod
    def toObject(expressionTypes):
        def _hx_local_1():
            def _hx_local_0(expressionType):
                return haxpression__Expression_Expression_Impl_.toObject(haxpression__Expression_Expression_Impl_.fromExpressionType(expressionType))
            return list(map(_hx_local_0,expressionTypes))
        return _hx_local_1()
haxpression_ExpressionTypes._hx_class = haxpression_ExpressionTypes


class haxpression_Expressions:
    _hx_class_name = "haxpression.Expressions"
    __slots__ = ()
    _hx_statics = ["toExpressionTypes", "clone", "evaluate", "hasVariablesStartingWith"]

    @staticmethod
    def toExpressionTypes(expressions):
        def _hx_local_1():
            def _hx_local_0(expression):
                return haxpression__Expression_Expression_Impl_.toExpressionType(expression)
            return list(map(_hx_local_0,expressions))
        return _hx_local_1()

    @staticmethod
    def clone(expressions):
        def _hx_local_1():
            def _hx_local_0(expression):
                return haxpression__Expression_Expression_Impl_.clone(expression)
            return list(map(_hx_local_0,expressions))
        return _hx_local_1()

    @staticmethod
    def evaluate(expressions,variables = None):
        def _hx_local_1():
            def _hx_local_0(expression):
                return haxpression__Expression_Expression_Impl_.evaluate(expression,variables)
            return list(map(_hx_local_0,expressions))
        return _hx_local_1()

    @staticmethod
    def hasVariablesStartingWith(expressions,text):
        def _hx_local_1():
            def _hx_local_0(expression):
                return haxpression__Expression_Expression_Impl_.hasVariablesStartingWith(expression,text)
            return haxpression_utils_Arrays.any(expressions,_hx_local_0)
        return _hx_local_1()
haxpression_Expressions._hx_class = haxpression_Expressions


class haxpression_Parser:
    _hx_class_name = "haxpression.Parser"
    __slots__ = ("inputString", "index", "length", "expressions")
    _hx_fields = ["inputString", "index", "length", "expressions"]
    _hx_methods = ["internalParse", "charAt", "charCodeAt", "gobbleSpaces", "gobbleExpression", "gobbleBinaryOperator", "gobbleBinaryExpression", "gobbleToken", "gobbleNumericLiteral", "gobbleStringLiteral", "gobbleIdentifier", "gobbleArguments", "gobbleVariable", "gobbleGroup", "gobbleArray"]
    _hx_statics = ["parse"]

    def __init__(self,inputString):
        self.inputString = inputString
        self.index = 0
        self.length = len(inputString)
        self.expressions = []

    def internalParse(self):
        while (self.index < self.length):
            charCode = self.charCodeAt(self.index)
            if ((charCode == haxpression_utils_Chars.SEMICOLON_CODE) or ((charCode == haxpression_utils_Chars.COMMA_CODE))):
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.index
                _hx_local_0.index = (_hx_local_1 + 1)
                _hx_local_1
            else:
                expression = self.gobbleExpression()
                if (expression is not None):
                    self.expressions.append(expression)
                elif (self.index < self.length):
                    raise _HxException(haxpression_Error((("unexpected internal parse \"" + HxOverrides.stringOrNull(self.charAt(self.index))) + "\""), self.inputString, self.index))
        if (len(self.expressions) == 1):
            return (self.expressions[0] if 0 < len(self.expressions) else None)
        else:
            def _hx_local_3():
                def _hx_local_2(expression1):
                    return haxpression__Expression_Expression_Impl_.toExpressionType(expression1)
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ECompound(list(map(_hx_local_2,self.expressions))))
            return _hx_local_3()

    def charAt(self,index):
        _this = self.inputString
        if ((index < 0) or ((index >= len(_this)))):
            return ""
        else:
            return _this[index]

    def charCodeAt(self,index):
        return HxString.charCodeAt(self.inputString,index)

    def gobbleSpaces(self):
        charCode = self.charCodeAt(self.index)
        while ((self.index < self.length) and haxpression_utils_Chars.isWhiteSpace(charCode)):
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.index
                _hx_local_0.index = (_hx_local_1 + 1)
                return _hx_local_0.index
            charCode = self.charCodeAt(_hx_local_2())

    def gobbleExpression(self):
        expression = self.gobbleBinaryExpression()
        self.gobbleSpaces()
        if (self.charCodeAt(self.index) == haxpression_utils_Chars.QUESTION_MARK_CODE):
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.index
            _hx_local_0.index = (_hx_local_1 + 1)
            _hx_local_1
            consequent = self.gobbleExpression()
            if (consequent is None):
                raise _HxException(haxpression_Error("expected a \"consequent\" expression for ternary conditional expression", self.inputString, self.index))
            self.gobbleSpaces()
            if (self.charCodeAt(self.index) == haxpression_utils_Chars.COLON_CODE):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.index
                _hx_local_2.index = (_hx_local_3 + 1)
                _hx_local_3
                alternate = self.gobbleExpression()
                if (alternate is None):
                    raise _HxException(haxpression_Error("expected an \"alternate\" expression for ternary conditional expression", self.inputString, self.index))
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EConditional(haxpression__Expression_Expression_Impl_.toExpressionType(expression),haxpression__Expression_Expression_Impl_.toExpressionType(consequent),haxpression__Expression_Expression_Impl_.toExpressionType(alternate)))
        return expression

    def gobbleBinaryOperator(self):
        self.gobbleSpaces()
        toCheck = HxString.substr(self.inputString,self.index,haxpression_BinaryOperations.getMaxOperatorLength())
        toCheckLength = len(toCheck)
        while (toCheckLength > 0):
            if haxpression_BinaryOperations.hasOperator(toCheck):
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.index
                _hx_local_0.index = (_hx_local_1 + toCheckLength)
                _hx_local_0.index
                return toCheck
            toCheckLength = (toCheckLength - 1)
            _hx_len = toCheckLength
            toCheck = HxString.substr(toCheck,0,_hx_len)
        return None

    def gobbleBinaryExpression(self):
        expression = None
        precedence = None
        binaryOperatorInfo = None
        left = self.gobbleToken()
        binaryOperator = self.gobbleBinaryOperator()
        if (binaryOperator is None):
            return left
        binaryOperatorInfo = _hx_AnonObject({'operator': binaryOperator, 'precedence': haxpression_BinaryOperations.getOperatorPrecedence(binaryOperator)})
        right = self.gobbleToken()
        if (right is None):
            raise _HxException(haxpression_Error((("expected expression after binary operator: \"" + ("null" if binaryOperator is None else binaryOperator)) + "\""), self.inputString, self.index))
        stack = [left, binaryOperatorInfo, right]
        while True:
            binaryOperator = self.gobbleBinaryOperator()
            if (not ((binaryOperator is not None))):
                break
            precedence = haxpression_BinaryOperations.getOperatorPrecedence(binaryOperator)
            if (precedence == 0):
                break
            binaryOperatorInfo = _hx_AnonObject({'operator': binaryOperator, 'precedence': precedence})
            while ((len(stack) > 2) and ((precedence <= Reflect.field(python_internal_ArrayImpl._get(stack, (len(stack) - 2)),"precedence")))):
                right = (None if ((len(stack) == 0)) else stack.pop())
                binaryOperator = Reflect.field(((None if ((len(stack) == 0)) else stack.pop())),"operator")
                left = (None if ((len(stack) == 0)) else stack.pop())
                expression1 = haxpression_ExpressionType.EBinary(binaryOperator,haxpression__Expression_Expression_Impl_.toExpressionType(left),haxpression__Expression_Expression_Impl_.toExpressionType(right))
                stack.append(expression1)
            expression = self.gobbleToken()
            if (expression is None):
                raise _HxException(haxpression_Error((("expected expression after binary operator: \"" + ("null" if binaryOperator is None else binaryOperator)) + "\""), self.inputString, self.index))
            stack.append(binaryOperatorInfo)
            stack.append(expression)
        i = (len(stack) - 1)
        expression = (stack[i] if i >= 0 and i < len(stack) else None)
        while (i > 1):
            expression = haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EBinary(Reflect.field(python_internal_ArrayImpl._get(stack, (i - 1)),"operator"),python_internal_ArrayImpl._get(stack, (i - 2)),haxpression__Expression_Expression_Impl_.toExpressionType(expression)))
            i = (i - 2)
        return expression

    def gobbleToken(self):
        self.gobbleSpaces()
        charCode = self.charCodeAt(self.index)
        if (haxpression_utils_Chars.isDecimalDigit(charCode) or ((charCode == haxpression_utils_Chars.PERIOD_CODE))):
            return self.gobbleNumericLiteral()
        elif ((charCode == haxpression_utils_Chars.SINGLE_QUOTE_CODE) or ((charCode == haxpression_utils_Chars.DOUBLE_QUOTE_CODE))):
            return self.gobbleStringLiteral()
        elif (haxpression_utils_Chars.isIdentifierStart(charCode) or ((charCode == haxpression_utils_Chars.OPEN_PAREN_CODE))):
            return self.gobbleVariable()
        elif (charCode == haxpression_utils_Chars.OPEN_BRACKET_CODE):
            return self.gobbleArray()
        else:
            toCheck = HxString.substr(self.inputString,self.index,haxpression_UnaryOperations.getMaxOperatorLength())
            toCheckLength = len(toCheck)
            while (toCheckLength > 0):
                if haxpression_UnaryOperations.hasOperator(toCheck):
                    _hx_local_0 = self
                    _hx_local_1 = _hx_local_0.index
                    _hx_local_0.index = (_hx_local_1 + toCheckLength)
                    _hx_local_0.index
                    return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EUnary(toCheck,haxpression__Expression_Expression_Impl_.toExpressionType(self.gobbleToken())))
                toCheckLength = (toCheckLength - 1)
                _hx_len = toCheckLength
                toCheck = HxString.substr(toCheck,0,_hx_len)
            return None

    def gobbleNumericLiteral(self):
        numberString = ""
        while ((self.index < self.length) and haxpression_utils_Chars.isDecimalDigit(self.charCodeAt(self.index))):
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.index
                _hx_local_0.index = (_hx_local_1 + 1)
                return _hx_local_1
            tmp = self.charAt(_hx_local_2())
            numberString = (("null" if numberString is None else numberString) + ("null" if tmp is None else tmp))
        if (self.charCodeAt(self.index) == haxpression_utils_Chars.PERIOD_CODE):
            def _hx_local_6():
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.index
                _hx_local_4.index = (_hx_local_5 + 1)
                return _hx_local_5
            tmp1 = self.charAt(_hx_local_6())
            numberString = (("null" if numberString is None else numberString) + ("null" if tmp1 is None else tmp1))
            while ((self.index < self.length) and haxpression_utils_Chars.isDecimalDigit(self.charCodeAt(self.index))):
                def _hx_local_10():
                    _hx_local_8 = self
                    _hx_local_9 = _hx_local_8.index
                    _hx_local_8.index = (_hx_local_9 + 1)
                    return _hx_local_9
                tmp2 = self.charAt(_hx_local_10())
                numberString = (("null" if numberString is None else numberString) + ("null" if tmp2 is None else tmp2))
        char = self.charAt(self.index)
        if ((char == "e") or ((char == "E"))):
            def _hx_local_14():
                _hx_local_12 = self
                _hx_local_13 = _hx_local_12.index
                _hx_local_12.index = (_hx_local_13 + 1)
                return _hx_local_13
            tmp3 = self.charAt(_hx_local_14())
            numberString = (("null" if numberString is None else numberString) + ("null" if tmp3 is None else tmp3))
            char = self.charAt(self.index)
            if ((char == "+") or ((char == "-"))):
                def _hx_local_18():
                    _hx_local_16 = self
                    _hx_local_17 = _hx_local_16.index
                    _hx_local_16.index = (_hx_local_17 + 1)
                    return _hx_local_17
                tmp4 = self.charAt(_hx_local_18())
                numberString = (("null" if numberString is None else numberString) + ("null" if tmp4 is None else tmp4))
            while ((self.index < self.length) and haxpression_utils_Chars.isDecimalDigit(self.charCodeAt(self.index))):
                def _hx_local_22():
                    _hx_local_20 = self
                    _hx_local_21 = _hx_local_20.index
                    _hx_local_20.index = (_hx_local_21 + 1)
                    return _hx_local_21
                tmp5 = self.charAt(_hx_local_22())
                numberString = (("null" if numberString is None else numberString) + ("null" if tmp5 is None else tmp5))
            if (not haxpression_utils_Chars.isDecimalDigit(self.charCodeAt((self.index - 1)))):
                raise _HxException(haxpression_Error(((("expected exponent in numeric literal: \"" + ("null" if numberString is None else numberString)) + HxOverrides.stringOrNull(self.charAt(self.index))) + "\""), self.inputString, self.index))
        if (self.index >= self.length):
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VFloat(Std.parseFloat(numberString))))
        charCode = self.charCodeAt(self.index)
        if haxpression_utils_Chars.isIdentifierStart(charCode):
            raise _HxException(haxpression_Error(((("variable names cannot start with a number: \"" + ("null" if numberString is None else numberString)) + HxOverrides.stringOrNull(self.charAt(self.index))) + "\""), self.inputString, self.index))
        elif (charCode == haxpression_utils_Chars.PERIOD_CODE):
            raise _HxException(haxpression_Error(((("unexpected period in numeric literal: \"" + ("null" if numberString is None else numberString)) + HxOverrides.stringOrNull(self.charAt(self.index))) + "\""), self.inputString, self.index))
        return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VFloat(Std.parseFloat(numberString))))

    def gobbleStringLiteral(self):
        _hx_str = ""
        def _hx_local_2():
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.index
            _hx_local_0.index = (_hx_local_1 + 1)
            return _hx_local_1
        quote = self.charAt(_hx_local_2())
        closed = False
        while (self.index < self.length):
            def _hx_local_5():
                _hx_local_3 = self
                _hx_local_4 = _hx_local_3.index
                _hx_local_3.index = (_hx_local_4 + 1)
                return _hx_local_4
            char = self.charAt(_hx_local_5())
            if (char == quote):
                closed = True
                break
            elif (char == "\\"):
                def _hx_local_8():
                    _hx_local_6 = self
                    _hx_local_7 = _hx_local_6.index
                    _hx_local_6.index = (_hx_local_7 + 1)
                    return _hx_local_7
                char = self.charAt(_hx_local_8())
                if (char == "n"):
                    _hx_str = (("null" if _hx_str is None else _hx_str) + "\n")
                elif (char == "r"):
                    _hx_str = (("null" if _hx_str is None else _hx_str) + "\r")
                elif (char == "t"):
                    _hx_str = (("null" if _hx_str is None else _hx_str) + "\t")
                elif (char == "v"):
                    _hx_str = (("null" if _hx_str is None else _hx_str) + "\x0B")
                else:
                    pass
            else:
                _hx_str = (("null" if _hx_str is None else _hx_str) + ("null" if char is None else char))
        if (not closed):
            raise _HxException(haxpression_Error((("unclosed quote after: \"" + ("null" if _hx_str is None else _hx_str)) + "\""), self.inputString, self.index))
        return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VString(_hx_str)))

    def gobbleIdentifier(self):
        charCode = self.charCodeAt(self.index)
        start = self.index
        identifier = None
        if haxpression_utils_Chars.isIdentifierStart(charCode):
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.index
            _hx_local_0.index = (_hx_local_1 + 1)
            _hx_local_1
        else:
            raise _HxException(haxpression_Error(("unexpected " + HxOverrides.stringOrNull(self.charAt(self.index))), self.inputString, self.index))
        while (self.index < self.length):
            charCode = self.charCodeAt(self.index)
            if haxpression_utils_Chars.isIdentifierPart(charCode):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.index
                _hx_local_2.index = (_hx_local_3 + 1)
                _hx_local_3
            else:
                break
        identifier = HxString.substring(self.inputString,start,self.index)
        _hx_local_4 = len((identifier.lower()))
        if (_hx_local_4 == 9):
            if ((identifier.lower()) == "undefined"):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VNA))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EIdentifier(identifier))
        elif (_hx_local_4 == 5):
            if ((identifier.lower()) == "false"):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VBool(False)))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EIdentifier(identifier))
        elif (_hx_local_4 == 4):
            if ((identifier.lower()) == "null"):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VNA))
            elif ((identifier.lower()) == "true"):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VBool(True)))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EIdentifier(identifier))
        elif (_hx_local_4 == 2):
            if ((identifier.lower()) == "na"):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VNA))
            elif ((identifier.lower()) == "nm"):
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ELiteral(haxpression_ValueType.VNM))
            else:
                return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EIdentifier(identifier))
        else:
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EIdentifier(identifier))

    def gobbleArguments(self,terminationCharCode):
        expressions = []
        sawTermination = False
        while (self.index < self.length):
            self.gobbleSpaces()
            charCode = self.charCodeAt(self.index)
            if (charCode == terminationCharCode):
                sawTermination = True
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.index
                _hx_local_0.index = (_hx_local_1 + 1)
                _hx_local_1
                break
            elif (charCode == haxpression_utils_Chars.COMMA_CODE):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.index
                _hx_local_2.index = (_hx_local_3 + 1)
                _hx_local_3
            else:
                expression = self.gobbleExpression()
                if ((expression is None) or haxpression__Expression_Expression_Impl_.isCompound(expression)):
                    raise _HxException(haxpression_Error("expected comma between arguments", self.inputString, self.index))
                expressions.append(expression)
        if (not sawTermination):
            raise _HxException(haxpression_Error((("expected termination character: \"" + HxOverrides.stringOrNull("".join(map(chr,[terminationCharCode])))) + "\""), self.inputString, self.index))
        return expressions

    def gobbleVariable(self):
        charCode = self.charCodeAt(self.index)
        expression = (self.gobbleGroup() if ((charCode == haxpression_utils_Chars.OPEN_PAREN_CODE)) else self.gobbleIdentifier())
        self.gobbleSpaces()
        if (self.index < self.length):
            charCode = self.charCodeAt(self.index)
            while ((self.index < self.length) and ((((charCode == haxpression_utils_Chars.PERIOD_CODE) or ((charCode == haxpression_utils_Chars.OPEN_BRACKET_CODE))) or ((charCode == haxpression_utils_Chars.OPEN_PAREN_CODE))))):
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.index
                _hx_local_0.index = (_hx_local_1 + 1)
                _hx_local_1
                if (charCode == haxpression_utils_Chars.PERIOD_CODE):
                    raise _HxException(haxpression_Error("member access expressions like \"a.b\" are not supported", self.inputString, self.index))
                elif (charCode == haxpression_utils_Chars.OPEN_BRACKET_CODE):
                    raise _HxException(haxpression_Error("member access expressions like \"a[\"b\"]\" are not supported", self.inputString, self.index))
                elif (charCode == haxpression_utils_Chars.OPEN_PAREN_CODE):
                    callee = None
                    _g = haxpression__Expression_Expression_Impl_.toExpressionType(expression)
                    if (_g.index == 1):
                        callee = _g.params[0]
                    else:
                        raise _HxException(haxpression_Error("expected function name identifier for function call expression", self.inputString, self.index))
                    def _hx_local_2(expression1):
                        return haxpression__Expression_Expression_Impl_.toExpressionType(expression1)
                    expression = haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.ECall(callee,list(map(_hx_local_2,self.gobbleArguments(haxpression_utils_Chars.CLOSE_PAREN_CODE)))))
                self.gobbleSpaces()
                charCode = self.charCodeAt(self.index)
        return expression

    def gobbleGroup(self):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.index
        _hx_local_0.index = (_hx_local_1 + 1)
        _hx_local_1
        expression = self.gobbleExpression()
        if (self.charCodeAt(self.index) == haxpression_utils_Chars.CLOSE_PAREN_CODE):
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.index
            _hx_local_2.index = (_hx_local_3 + 1)
            _hx_local_3
            return expression
        else:
            raise _HxException(haxpression_Error("unclosed (", self.inputString, self.index))

    def gobbleArray(self):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.index
        _hx_local_0.index = (_hx_local_1 + 1)
        _hx_local_1
        def _hx_local_3():
            def _hx_local_2(expression):
                return haxpression__Expression_Expression_Impl_.toExpressionType(expression)
            return haxpression__Expression_Expression_Impl_.fromExpressionType(haxpression_ExpressionType.EArray(list(map(_hx_local_2,self.gobbleArguments(haxpression_utils_Chars.CLOSE_BRACKET_CODE)))))
        return _hx_local_3()

    @staticmethod
    def parse(input):
        return haxpression_Parser(input).internalParse()

haxpression_Parser._hx_class = haxpression_Parser


class haxpression_UnaryOperations:
    _hx_class_name = "haxpression.UnaryOperations"
    __slots__ = ()
    _hx_statics = ["map", "evaluate", "addOperator", "removeOperator", "hasOperator", "clearOperators", "getMaxOperatorLength", "wrapOperation"]
    map = None

    @staticmethod
    def evaluate(operator,value):
        return haxpression_UnaryOperations.map.h.get(operator,None).operation(value)

    @staticmethod
    def addOperator(operator,operation):
        haxpression_UnaryOperations.map.h[operator] = _hx_AnonObject({'operation': haxpression_UnaryOperations.wrapOperation(operation)})

    @staticmethod
    def removeOperator(operator):
        haxpression_UnaryOperations.map.remove(operator)

    @staticmethod
    def hasOperator(operator):
        return operator in haxpression_UnaryOperations.map.h

    @staticmethod
    def clearOperators():
        haxpression_UnaryOperations.map = haxe_ds_StringMap()

    @staticmethod
    def getMaxOperatorLength():
        def _hx_local_1():
            def _hx_local_0(maxLength,key):
                if (len(key) > maxLength):
                    return len(key)
                else:
                    return maxLength
            return haxpression_utils_Arrays.reduce(haxpression_utils_Iterators.toArray(haxpression_UnaryOperations.map.keys()),_hx_local_0,0)
        return _hx_local_1()

    @staticmethod
    def wrapOperation(operation):
        def _hx_local_0(value):
            if haxpression__Value_Value_Impl_.isNA(value):
                return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNA)
            elif haxpression__Value_Value_Impl_.isNM(value):
                return haxpression__Value_Value_Impl_.fromValueType(haxpression_ValueType.VNM)
            else:
                return operation(value)
        return _hx_local_0
haxpression_UnaryOperations._hx_class = haxpression_UnaryOperations


class haxpression_python_PythonExports:
    _hx_class_name = "haxpression.python.PythonExports"
    __slots__ = ()
    _hx_statics = ["getEvaluationInfo", "parseToObject", "parseEvaluate", "expressionToDict"]

    @staticmethod
    def getEvaluationInfo(mappings,requestedFieldIds):
        obj = python_Lib.dictToAnon(mappings)
        _hx_map = haxe_ds_StringMap()
        _g = 0
        _g1 = python_Boot.fields(obj)
        while (_g < len(_g1)):
            field = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            arr = Reflect.field(obj,field)
            _hx_map.h[field] = list(map(haxpression__ExpressionOrValue_ExpressionOrValue_Impl_.fromString,arr))
        info = haxpression_ExpressionGroup.fromFallbackMap(_hx_map).getEvaluationInfo(requestedFieldIds)
        expressionAstsObj = _hx_AnonObject({})
        tmp = info.expressions.keys()
        while tmp.hasNext():
            key = tmp.next()
            value = haxpression_python_PythonExports.expressionToDict(info.expressions.h.get(key,None))
            setattr(expressionAstsObj,(("_hx_" + key) if (key in python_Boot.keywords) else (("_hx_" + key) if (((((len(key) > 2) and ((ord(key[0]) == 95))) and ((ord(key[1]) == 95))) and ((ord(key[(len(key) - 1)]) != 95)))) else key)),value)
        return python_Lib.anonToDict(_hx_AnonObject({'expressionAsts': python_Lib.anonToDict(expressionAstsObj), 'externalVariables': info.externalVariables, 'sortedComputedVariables': info.sortedComputedVariables}))

    @staticmethod
    def parseToObject(s):
        return haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromString(s))

    @staticmethod
    def parseEvaluate(s,_hx_dict):
        _hx_map = haxe_ds_StringMap()
        o = python_Lib.dictToAnon(_hx_dict)
        _g = 0
        _g1 = python_Boot.fields(o)
        while (_g < len(_g1)):
            field = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            _hx_map.h[field] = haxpression__Value_Value_Impl_.fromDynamic(Reflect.field(o,field))
        return haxpression__Value_Value_Impl_.toDynamic(haxpression__Expression_Expression_Impl_.evaluate(haxpression__Expression_Expression_Impl_.fromString(s),_hx_map))

    @staticmethod
    def expressionToDict(expression):
        _g = haxpression__Expression_Expression_Impl_.toExpressionType(expression)
        tmp = None
        if ((_g.index) == 0):
            tmp = _hx_AnonObject({'type': "Literal", 'value': haxpression__Value_Value_Impl_.toDynamic(_g.params[0])})
        elif ((_g.index) == 1):
            tmp = _hx_AnonObject({'type': "Identifier", 'name': _g.params[0]})
        elif ((_g.index) == 2):
            tmp = _hx_AnonObject({'type': "Unary", 'operator': _g.params[0], 'operand': haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(_g.params[1]))})
        elif ((_g.index) == 3):
            tmp = _hx_AnonObject({'type': "Binary", 'operator': _g.params[0], 'left': haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(_g.params[1])), 'right': haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(_g.params[2]))})
        elif ((_g.index) == 4):
            def _hx_local_0(arg):
                return haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(arg))
            tmp = _hx_AnonObject({'type': "Call", 'callee': _g.params[0], 'arguments': list(map(_hx_local_0,_g.params[1]))})
        elif ((_g.index) == 5):
            tmp = _hx_AnonObject({'type': "Conditional", 'test': haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(_g.params[0])), 'consequent': haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(_g.params[1])), 'alternate': haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(_g.params[2]))})
        elif ((_g.index) == 6):
            def _hx_local_1(item):
                return haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(item))
            tmp = _hx_AnonObject({'type': "Array", 'items': list(map(_hx_local_1,_g.params[0]))})
        elif ((_g.index) == 7):
            def _hx_local_2(item1):
                return haxpression_python_PythonExports.expressionToDict(haxpression__Expression_Expression_Impl_.fromExpressionType(item1))
            tmp = _hx_AnonObject({'type': "Compound", 'items': list(map(_hx_local_2,_g.params[0]))})
        else:
            pass
        return python_Lib.anonToDict(tmp)
haxpression_python_PythonExports._hx_class = haxpression_python_PythonExports


class haxpression_utils_Arrays:
    _hx_class_name = "haxpression.utils.Arrays"
    __slots__ = ()
    _hx_statics = ["contains", "isEmpty", "isFull", "containsAll", "containsAny", "containsNone", "each", "find", "any", "all", "reduce"]

    @staticmethod
    def contains(items,item):
        return (python_internal_ArrayImpl.indexOf(items,item,None) != -1)

    @staticmethod
    def isEmpty(items):
        if (items is not None):
            return (len(items) == 0)
        else:
            return True

    @staticmethod
    def isFull(items):
        if (items is not None):
            return (len(items) > 0)
        else:
            return False

    @staticmethod
    def containsAll(items,others):
        if ((len(items) == 0) and ((len(others) == 0))):
            return True
        if (len(items) == 0):
            return False
        if (len(others) == 0):
            return True
        def _hx_local_1():
            def _hx_local_0(other):
                return haxpression_utils_Arrays.contains(items,other)
            return haxpression_utils_Arrays.all(others,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def containsAny(items,others):
        if ((len(items) == 0) and ((len(others) == 0))):
            return True
        if (len(items) == 0):
            return False
        if (len(others) == 0):
            return True
        def _hx_local_1():
            def _hx_local_0(other):
                return haxpression_utils_Arrays.contains(items,other)
            return haxpression_utils_Arrays.any(others,_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def containsNone(items,others):
        if ((len(items) == 0) and ((len(others) == 0))):
            return True
        if (len(items) == 0):
            return True
        if (len(others) == 0):
            return True
        return (not haxpression_utils_Arrays.containsAny(items,others))

    @staticmethod
    def each(items,callback):
        Lambda.iter(items,callback)
        return

    @staticmethod
    def find(items,callback):
        _g = 0
        while (_g < len(items)):
            item = (items[_g] if _g >= 0 and _g < len(items) else None)
            _g = (_g + 1)
            if callback(item):
                return item
        return None

    @staticmethod
    def any(items,check):
        return (Lambda.find(items,check) is not None)

    @staticmethod
    def all(items,check):
        return (len(list(filter(check,items))) == len(items))

    @staticmethod
    def reduce(items,callback,acc):
        _g = 0
        while (_g < len(items)):
            item = (items[_g] if _g >= 0 and _g < len(items) else None)
            _g = (_g + 1)
            acc = callback(acc,item)
        return acc
haxpression_utils_Arrays._hx_class = haxpression_utils_Arrays


class haxpression_utils_Chars:
    _hx_class_name = "haxpression.utils.Chars"
    __slots__ = ()
    _hx_statics = ["PERIOD", "COMMA", "SINGLE_QUOTE", "DOUBLE_QUOTE", "EXCLAMATION_POINT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", "QUESTION_MARK", "SEMICOLON", "COLON", "TAB_CODE", "LF_CODE", "CR_CODE", "SPACE_CODE", "EXCLAMATION_POINT_CODE", "DOUBLE_QUOTE_CODE", "DOLLAR_CODE", "SINGLE_QUOTE_CODE", "OPEN_PAREN_CODE", "CLOSE_PAREN_CODE", "COMMA_CODE", "PERIOD_CODE", "COLON_CODE", "SEMICOLON_CODE", "QUESTION_MARK_CODE", "OPEN_BRACKET_CODE", "CLOSE_BRACKET_CODE", "UNDERSCORE_CODE", "OTHER_IDENTIFIER_START_CODES", "OTHER_IDENTIFIER_PART_CODES", "isDecimalDigit", "isUpperCaseLetter", "isLowerCaseLetter", "isIdentifierStart", "isIdentifierPart", "isWhiteSpace"]

    @staticmethod
    def isDecimalDigit(charCode):
        if (charCode >= 48):
            return (charCode <= 57)
        else:
            return False

    @staticmethod
    def isUpperCaseLetter(charCode):
        if (charCode >= 65):
            return (charCode <= 90)
        else:
            return False

    @staticmethod
    def isLowerCaseLetter(charCode):
        if (charCode >= 97):
            return (charCode <= 122)
        else:
            return False

    @staticmethod
    def isIdentifierStart(charCode):
        if (not (((((charCode == haxpression_utils_Chars.DOLLAR_CODE) or ((charCode == haxpression_utils_Chars.UNDERSCORE_CODE))) or haxpression_utils_Chars.isUpperCaseLetter(charCode)) or haxpression_utils_Chars.isLowerCaseLetter(charCode)))):
            return haxpression_utils_Arrays.contains(haxpression_utils_Chars.OTHER_IDENTIFIER_START_CODES,charCode)
        else:
            return True

    @staticmethod
    def isIdentifierPart(charCode):
        if (not ((haxpression_utils_Chars.isIdentifierStart(charCode) or haxpression_utils_Chars.isDecimalDigit(charCode)))):
            return haxpression_utils_Arrays.contains(haxpression_utils_Chars.OTHER_IDENTIFIER_PART_CODES,charCode)
        else:
            return True

    @staticmethod
    def isWhiteSpace(charCode):
        if (not ((((charCode == haxpression_utils_Chars.TAB_CODE) or ((charCode == haxpression_utils_Chars.LF_CODE))) or ((charCode == haxpression_utils_Chars.CR_CODE))))):
            return (charCode == haxpression_utils_Chars.SPACE_CODE)
        else:
            return True
haxpression_utils_Chars._hx_class = haxpression_utils_Chars


class haxpression_utils_Iterators:
    _hx_class_name = "haxpression.utils.Iterators"
    __slots__ = ()
    _hx_statics = ["contains", "toArray", "map", "each"]

    @staticmethod
    def contains(iterator,target):
        while iterator.hasNext():
            if (iterator.next() == target):
                return True
        return False

    @staticmethod
    def toArray(iterator):
        result = []
        while iterator.hasNext():
            value = iterator.next()
            result.append(value)
        return result

    @staticmethod
    def map(iterator,callback):
        return list(map(callback,haxpression_utils_Iterators.toArray(iterator)))

    @staticmethod
    def each(iterator,callback):
        Lambda.iter(haxpression_utils_Iterators.toArray(iterator),callback)
haxpression_utils_Iterators._hx_class = haxpression_utils_Iterators


class haxpression_utils_Maps:
    _hx_class_name = "haxpression.utils.Maps"
    __slots__ = ()
    _hx_statics = ["values", "mapValues"]

    @staticmethod
    def values(_hx_map):
        def _hx_local_1():
            def _hx_local_0(key):
                return _hx_map.get(key)
            return haxpression_utils_Iterators.map(_hx_map.keys(),_hx_local_0)
        return _hx_local_1()

    @staticmethod
    def mapValues(_hx_map,mapper,seed):
        def _hx_local_1():
            def _hx_local_0(key,acc):
                acc.set(key,mapper(key,_hx_map.get(key)))
                return acc
            return Lambda.fold(haxpression_utils_Iterators.toArray(_hx_map.keys()),_hx_local_0,seed)
        return _hx_local_1()
haxpression_utils_Maps._hx_class = haxpression_utils_Maps


class haxpression_utils_Strings:
    _hx_class_name = "haxpression.utils.Strings"
    __slots__ = ()
    _hx_statics = ["contains", "icontains", "isEmpty", "icompare"]

    @staticmethod
    def contains(target,test):
        return (target.find(test) != -1)

    @staticmethod
    def icontains(target,test):
        _this = target.lower()
        _hx_str = test.lower()
        return (_this.find(_hx_str) != -1)

    @staticmethod
    def isEmpty(input):
        if (input is not None):
            return (input == "")
        else:
            return True

    @staticmethod
    def icompare(s1,s2):
        s1 = s1.lower()
        s2 = s2.lower()
        if (s1 > s2):
            return 1
        elif (s1 < s2):
            return -1
        else:
            return 0
haxpression_utils_Strings._hx_class = haxpression_utils_Strings


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if isinstance(o,int):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        tmp = (("" + ("null" if f is None else f)) + " : ")
                        tmp1 = python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))
                        _g2.append((("null" if tmp is None else tmp) + ("null" if tmp1 is None else tmp1)))
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        tmp2 = (("" + ("null" if f1 is None else f1)) + " : ")
                        tmp3 = python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))
                        _g4.append((("null" if tmp2 is None else tmp2) + ("null" if tmp3 is None else tmp3)))
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        tmp4 = (("" + ("null" if f2 is None else f2)) + " : ")
                        tmp5 = python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))
                        _g5.append((("null" if tmp4 is None else tmp4) + ("null" if tmp5 is None else tmp5)))
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if (field in python_Boot.keywords) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        _hx_local_0 = len(field)
        if (_hx_local_0 == 10):
            if (field == "charCodeAt"):
                if isinstance(o,str):
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field == "lastIndexOf"):
                if isinstance(o,str):
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field == "toLowerCase"):
                if isinstance(o,str):
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field == "toUpperCase"):
                if isinstance(o,str):
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field == "substring"):
                if isinstance(o,str):
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field == "copy"):
                if isinstance(o,list):
                    def _hx_local_7():
                        return list(o)
                    return _hx_local_7
            elif (field == "join"):
                if isinstance(o,list):
                    def _hx_local_8(sep):
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field == "push"):
                if isinstance(o,list):
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field == "sort"):
                if isinstance(o,list):
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field == "shift"):
                if isinstance(o,list):
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field == "slice"):
                if isinstance(o,list):
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field == "split"):
                if isinstance(o,str):
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field == "indexOf"):
                if isinstance(o,str):
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field == "reverse"):
                if isinstance(o,list):
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field == "unshift"):
                if isinstance(o,list):
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field == "map"):
                if isinstance(o,list):
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field == "pop"):
                if isinstance(o,list):
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field == "iterator"):
                if isinstance(o,list):
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field == "toString"):
                if isinstance(o,str):
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field == "charAt"):
                if isinstance(o,str):
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field == "concat"):
                if isinstance(o,list):
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field == "filter"):
                if isinstance(o,list):
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field == "insert"):
                if isinstance(o,list):
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field == "remove"):
                if isinstance(o,list):
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field == "splice"):
                if isinstance(o,list):
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field == "substr"):
                if isinstance(o,str):
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        field1 = (("_hx_" + field) if (field in python_Boot.keywords) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not f1 in scMap):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if real in python_Boot.keywords:
                return real
        return name
python_Boot._hx_class = python_Boot


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has

python_HaxeIterator._hx_class = python_HaxeIterator


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["dictToAnon", "anonToDict"]

    @staticmethod
    def dictToAnon(v):
        return _hx_AnonObject(v.copy())

    @staticmethod
    def anonToDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None
python_Lib._hx_class = python_Lib


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g1 = l
        while (_g1 < _hx_len):
            i = _g1
            _g1 = (_g1 + 1)
            if (a[i] == x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if (a[l] == x):
                return l
        return -1

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None
python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        super().__init__(str(val))
        self.val = val

_HxException._hx_class = _HxException


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["iterator", "eq", "stringOrNull", "rshift", "modf", "mod"]

    @staticmethod
    def iterator(x):
        if isinstance(x,list):
            return python_HaxeIterator(x.__iter__())
        return x.iterator()

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def rshift(val,n):
        return ((val % 0x100000000) >> n)

    @staticmethod
    def modf(a,b):
        return float('nan') if (b == 0.0) else a % b if a >= 0 else -(-a % b)

    @staticmethod
    def mod(a,b):
        return a % b if a >= 0 else -(-a % b)
HxOverrides._hx_class = HxOverrides


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            return s[startIndex:(startIndex + _hx_len)]
HxString._hx_class = HxString

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi
haxpression_BinaryOperations.map = haxe_ds_StringMap()
def _hx_local_0(left,right):
    return haxpression__Value_Value_Impl_.fromBool((haxpression__Value_Value_Impl_.toBool(left) or haxpression__Value_Value_Impl_.toBool(right)))
haxpression_BinaryOperations.addOperator("||",1,_hx_local_0)
def _hx_local_1(left1,right1):
    return haxpression__Value_Value_Impl_.fromBool((haxpression__Value_Value_Impl_.toBool(left1) and haxpression__Value_Value_Impl_.toBool(right1)))
haxpression_BinaryOperations.addOperator("&&",2,_hx_local_1)
def _hx_local_2(left2,right2):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toInt(left2) | haxpression__Value_Value_Impl_.toInt(right2)))
haxpression_BinaryOperations.addOperator("|",3,_hx_local_2)
def _hx_local_3(left3,right3):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toInt(left3) ^ haxpression__Value_Value_Impl_.toInt(right3)))
haxpression_BinaryOperations.addOperator("^",4,_hx_local_3)
def _hx_local_4(left4,right4):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toInt(left4) & haxpression__Value_Value_Impl_.toInt(right4)))
haxpression_BinaryOperations.addOperator("&",5,_hx_local_4)
def _hx_local_5(left5,right5):
    return haxpression__Value_Value_Impl_.fromBool((haxpression__Value_Value_Impl_.toFloat(left5) == haxpression__Value_Value_Impl_.toFloat(right5)))
haxpression_BinaryOperations.addOperator("==",6,_hx_local_5)
def _hx_local_6(left6,right6):
    return haxpression__Value_Value_Impl_.fromBool((haxpression__Value_Value_Impl_.toFloat(left6) != haxpression__Value_Value_Impl_.toFloat(right6)))
haxpression_BinaryOperations.addOperator("!=",6,_hx_local_6)
def _hx_local_7(left7,right7):
    return haxpression__Value_Value_Impl_.fromBool((haxpression__Value_Value_Impl_.toFloat(left7) < haxpression__Value_Value_Impl_.toFloat(right7)))
haxpression_BinaryOperations.addOperator("<",7,_hx_local_7)
def _hx_local_8(left8,right8):
    return haxpression__Value_Value_Impl_.fromBool((haxpression__Value_Value_Impl_.toFloat(left8) > haxpression__Value_Value_Impl_.toFloat(right8)))
haxpression_BinaryOperations.addOperator(">",7,_hx_local_8)
def _hx_local_9(left9,right9):
    return haxpression__Value_Value_Impl_.fromBool((haxpression__Value_Value_Impl_.toFloat(left9) <= haxpression__Value_Value_Impl_.toFloat(right9)))
haxpression_BinaryOperations.addOperator("<=",7,_hx_local_9)
def _hx_local_10(left10,right10):
    return haxpression__Value_Value_Impl_.fromBool((haxpression__Value_Value_Impl_.toFloat(left10) >= haxpression__Value_Value_Impl_.toFloat(right10)))
haxpression_BinaryOperations.addOperator(">=",7,_hx_local_10)
def _hx_local_11(left11,right11):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toInt(left11) << haxpression__Value_Value_Impl_.toInt(right11)))
haxpression_BinaryOperations.addOperator("<<",8,_hx_local_11)
def _hx_local_12(left12,right12):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toInt(left12) >> haxpression__Value_Value_Impl_.toInt(right12)))
haxpression_BinaryOperations.addOperator(">>",8,_hx_local_12)
def _hx_local_13(left13,right13):
    return haxpression__Value_Value_Impl_.fromFloat(HxOverrides.rshift(haxpression__Value_Value_Impl_.toInt(left13), haxpression__Value_Value_Impl_.toInt(right13)))
haxpression_BinaryOperations.addOperator(">>>",8,_hx_local_13)
def _hx_local_14(left14,right14):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toFloat(left14) + haxpression__Value_Value_Impl_.toFloat(right14)))
haxpression_BinaryOperations.addOperator("+",9,_hx_local_14)
def _hx_local_15(left15,right15):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toFloat(left15) - haxpression__Value_Value_Impl_.toFloat(right15)))
haxpression_BinaryOperations.addOperator("-",9,_hx_local_15)
def _hx_local_16(left16,right16):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toFloat(left16) * haxpression__Value_Value_Impl_.toFloat(right16)))
haxpression_BinaryOperations.addOperator("*",10,_hx_local_16)
def _hx_local_17(left17,right17):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toFloat(left17) / haxpression__Value_Value_Impl_.toFloat(right17)))
haxpression_BinaryOperations.addOperator("/",10,_hx_local_17)
def _hx_local_18(left18,right18):
    return haxpression__Value_Value_Impl_.fromFloat(HxOverrides.modf(haxpression__Value_Value_Impl_.toFloat(left18), haxpression__Value_Value_Impl_.toFloat(right18)))
haxpression_BinaryOperations.addOperator("%",10,_hx_local_18)
def _hx_local_19(left19,right19):
    return haxpression__Value_Value_Impl_.fromFloat(Math.pow(haxpression__Value_Value_Impl_.toFloat(left19),haxpression__Value_Value_Impl_.toFloat(right19)))
haxpression_BinaryOperations.addOperator("**",11,_hx_local_19)
haxpression_CallOperations.map = haxe_ds_StringMap()
def _hx_local_0(arguments):
    v = haxpression__Value_Value_Impl_.toFloat((arguments[0] if 0 < len(arguments) else None))
    return haxpression__Value_Value_Impl_.fromFloat(Reflect.field(Math,"fabs")(v))
haxpression_CallOperations.addFunction("abs",1,_hx_local_0)
def _hx_local_1(arguments1):
    return haxpression__Value_Value_Impl_.fromFloat(Math.acos(haxpression__Value_Value_Impl_.toFloat((arguments1[0] if 0 < len(arguments1) else None))))
haxpression_CallOperations.addFunction("acos",1,_hx_local_1)
def _hx_local_2(arguments2):
    return haxpression__Value_Value_Impl_.fromFloat(Math.asin(haxpression__Value_Value_Impl_.toFloat((arguments2[0] if 0 < len(arguments2) else None))))
haxpression_CallOperations.addFunction("asin",1,_hx_local_2)
def _hx_local_3(arguments3):
    return haxpression__Value_Value_Impl_.fromFloat(Math.atan(haxpression__Value_Value_Impl_.toFloat((arguments3[0] if 0 < len(arguments3) else None))))
haxpression_CallOperations.addFunction("atan",1,_hx_local_3)
def _hx_local_4(arguments4):
    return haxpression__Value_Value_Impl_.fromFloat(Math.atan2(haxpression__Value_Value_Impl_.toFloat((arguments4[0] if 0 < len(arguments4) else None)),haxpression__Value_Value_Impl_.toFloat((arguments4[1] if 1 < len(arguments4) else None))))
haxpression_CallOperations.addFunction("atan2",2,_hx_local_4)
def _hx_local_5(arguments5):
    return haxpression__Value_Value_Impl_.fromFloat(Math.ceil(haxpression__Value_Value_Impl_.toFloat((arguments5[0] if 0 < len(arguments5) else None))))
haxpression_CallOperations.addFunction("ceil",1,_hx_local_5)
def _hx_local_6(arguments6):
    v1 = haxpression__Value_Value_Impl_.toFloat((arguments6[0] if 0 < len(arguments6) else None))
    return haxpression__Value_Value_Impl_.fromFloat((Math.NaN if (((v1 == Math.POSITIVE_INFINITY) or ((v1 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(v1)))
haxpression_CallOperations.addFunction("cos",1,_hx_local_6)
def _hx_local_7(arguments7):
    v2 = haxpression__Value_Value_Impl_.toFloat((arguments7[0] if 0 < len(arguments7) else None))
    return haxpression__Value_Value_Impl_.fromFloat((0.0 if ((v2 == Math.NEGATIVE_INFINITY)) else (Math.POSITIVE_INFINITY if ((v2 == Math.POSITIVE_INFINITY)) else Reflect.field(Math,"exp")(v2))))
haxpression_CallOperations.addFunction("exp",1,_hx_local_7)
def _hx_local_8(arguments8):
    v3 = haxpression__Value_Value_Impl_.toFloat((arguments8[0] if 0 < len(arguments8) else None))
    return haxpression__Value_Value_Impl_.fromFloat((v3 if (((v3 == Math.POSITIVE_INFINITY) or ((v3 == Math.NEGATIVE_INFINITY)))) else (Math.NaN if (python_lib_Math.isnan(v3)) else Math.ceil(v3))))
haxpression_CallOperations.addFunction("fceil",1,_hx_local_8)
def _hx_local_9(arguments9):
    v4 = haxpression__Value_Value_Impl_.toFloat((arguments9[0] if 0 < len(arguments9) else None))
    return haxpression__Value_Value_Impl_.fromFloat((v4 if (((v4 == Math.POSITIVE_INFINITY) or ((v4 == Math.NEGATIVE_INFINITY)))) else (Math.NaN if (python_lib_Math.isnan(v4)) else Math.floor(v4))))
haxpression_CallOperations.addFunction("ffloor",1,_hx_local_9)
def _hx_local_10(arguments10):
    return haxpression__Value_Value_Impl_.fromFloat(Math.floor(haxpression__Value_Value_Impl_.toFloat((arguments10[0] if 0 < len(arguments10) else None))))
haxpression_CallOperations.addFunction("floor",1,_hx_local_10)
def _hx_local_11(arguments11):
    v5 = haxpression__Value_Value_Impl_.toFloat((arguments11[0] if 0 < len(arguments11) else None))
    return haxpression__Value_Value_Impl_.fromFloat((v5 if (((v5 == Math.POSITIVE_INFINITY) or ((v5 == Math.NEGATIVE_INFINITY)))) else (Math.NaN if (python_lib_Math.isnan(v5)) else Math.floor((v5 + 0.5)))))
haxpression_CallOperations.addFunction("fround",1,_hx_local_11)
def _hx_local_12(arguments12):
    v6 = haxpression__Value_Value_Impl_.toFloat((arguments12[0] if 0 < len(arguments12) else None))
    return haxpression__Value_Value_Impl_.fromFloat((Math.NEGATIVE_INFINITY if ((v6 == 0.0)) else (Math.NaN if ((v6 < 0.0)) else python_lib_Math.log(v6))))
haxpression_CallOperations.addFunction("log",1,_hx_local_12)
def _hx_local_13(arguments13):
    a = haxpression__Value_Value_Impl_.toFloat((arguments13[0] if 0 < len(arguments13) else None))
    b = haxpression__Value_Value_Impl_.toFloat((arguments13[1] if 1 < len(arguments13) else None))
    return haxpression__Value_Value_Impl_.fromFloat((a if (python_lib_Math.isnan(a)) else (b if (python_lib_Math.isnan(b)) else max(a,b))))
haxpression_CallOperations.addFunction("max",2,_hx_local_13)
def _hx_local_14(arguments14):
    a1 = haxpression__Value_Value_Impl_.toFloat((arguments14[0] if 0 < len(arguments14) else None))
    b1 = haxpression__Value_Value_Impl_.toFloat((arguments14[1] if 1 < len(arguments14) else None))
    return haxpression__Value_Value_Impl_.fromFloat((a1 if (python_lib_Math.isnan(a1)) else (b1 if (python_lib_Math.isnan(b1)) else min(a1,b1))))
haxpression_CallOperations.addFunction("min",2,_hx_local_14)
def _hx_local_15(arguments15):
    return haxpression__Value_Value_Impl_.fromFloat(Math.pow(haxpression__Value_Value_Impl_.toFloat((arguments15[0] if 0 < len(arguments15) else None)),haxpression__Value_Value_Impl_.toFloat((arguments15[1] if 1 < len(arguments15) else None))))
haxpression_CallOperations.addFunction("pow",2,_hx_local_15)
def _hx_local_16(arguments16):
    return haxpression__Value_Value_Impl_.fromFloat(python_lib_Random.random())
haxpression_CallOperations.addFunction("random",0,_hx_local_16)
def _hx_local_17(arguments17):
    return haxpression__Value_Value_Impl_.fromFloat(python_lib_Random.random())
haxpression_CallOperations.addFunction("rand",0,_hx_local_17)
def _hx_local_18(arguments18):
    return haxpression__Value_Value_Impl_.fromFloat(Math.floor((haxpression__Value_Value_Impl_.toFloat((arguments18[0] if 0 < len(arguments18) else None)) + 0.5)))
haxpression_CallOperations.addFunction("round",1,_hx_local_18)
def _hx_local_19(arguments19):
    v7 = haxpression__Value_Value_Impl_.toFloat((arguments19[0] if 0 < len(arguments19) else None))
    return haxpression__Value_Value_Impl_.fromFloat((Math.NaN if (((v7 == Math.POSITIVE_INFINITY) or ((v7 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(v7)))
haxpression_CallOperations.addFunction("sin",1,_hx_local_19)
def _hx_local_20(arguments20):
    v8 = haxpression__Value_Value_Impl_.toFloat((arguments20[0] if 0 < len(arguments20) else None))
    return haxpression__Value_Value_Impl_.fromFloat((Math.NaN if ((v8 < 0)) else python_lib_Math.sqrt(v8)))
haxpression_CallOperations.addFunction("sqrt",1,_hx_local_20)
def _hx_local_21(arguments21):
    return haxpression__Value_Value_Impl_.fromFloat(Math.tan(haxpression__Value_Value_Impl_.toFloat((arguments21[0] if 0 < len(arguments21) else None))))
haxpression_CallOperations.addFunction("tan",1,_hx_local_21)
haxpression_UnaryOperations.map = haxe_ds_StringMap()
def _hx_local_0(value):
    return haxpression__Value_Value_Impl_.fromFloat((haxpression__Value_Value_Impl_.toFloat(value) * -1))
haxpression_UnaryOperations.addOperator("-",_hx_local_0)
def _hx_local_1(value1):
    return haxpression__Value_Value_Impl_.fromFloat(haxpression__Value_Value_Impl_.toFloat(value1))
haxpression_UnaryOperations.addOperator("+",_hx_local_1)
def _hx_local_2(value2):
    return haxpression__Value_Value_Impl_.fromBool((not haxpression__Value_Value_Impl_.toBool(value2)))
haxpression_UnaryOperations.addOperator("!",_hx_local_2)
def _hx_local_3(value3):
    return haxpression__Value_Value_Impl_.fromFloat(~haxpression__Value_Value_Impl_.toInt(value3))
haxpression_UnaryOperations.addOperator("~",_hx_local_3)

Date.EPOCH_UTC = python_lib_datetime_Datetime.fromtimestamp(0,python_lib_datetime_Timezone.utc)
haxpression__Value_Value_Impl_.NA_STRING = "na"
haxpression__Value_Value_Impl_.NM_STRING = "nm"
haxpression__Value_Value_Impl_.NULL_STRING = "null"
haxpression__Value_Value_Impl_.TRUE_STRING = "true"
haxpression__Value_Value_Impl_.FALSE_STRING = "false"
haxpression_Config.useCloneForExpressions = False
haxpression_Config.useCloneForExpressionGroups = False
haxpression_utils_Chars.PERIOD = "."
haxpression_utils_Chars.COMMA = ","
haxpression_utils_Chars.SINGLE_QUOTE = "'"
haxpression_utils_Chars.DOUBLE_QUOTE = "\""
haxpression_utils_Chars.EXCLAMATION_POINT = "!"
haxpression_utils_Chars.OPEN_PAREN = "("
haxpression_utils_Chars.CLOSE_PAREN = ")"
haxpression_utils_Chars.OPEN_BRACKET = "["
haxpression_utils_Chars.CLOSE_BRACKET = "]"
haxpression_utils_Chars.QUESTION_MARK = "?"
haxpression_utils_Chars.SEMICOLON = ";"
haxpression_utils_Chars.COLON = ":"
haxpression_utils_Chars.TAB_CODE = 9
haxpression_utils_Chars.LF_CODE = 10
haxpression_utils_Chars.CR_CODE = 13
haxpression_utils_Chars.SPACE_CODE = 32
haxpression_utils_Chars.EXCLAMATION_POINT_CODE = 33
haxpression_utils_Chars.DOUBLE_QUOTE_CODE = 34
haxpression_utils_Chars.DOLLAR_CODE = 36
haxpression_utils_Chars.SINGLE_QUOTE_CODE = 39
haxpression_utils_Chars.OPEN_PAREN_CODE = 40
haxpression_utils_Chars.CLOSE_PAREN_CODE = 41
haxpression_utils_Chars.COMMA_CODE = 44
haxpression_utils_Chars.PERIOD_CODE = 46
haxpression_utils_Chars.COLON_CODE = 58
haxpression_utils_Chars.SEMICOLON_CODE = 59
haxpression_utils_Chars.QUESTION_MARK_CODE = 63
haxpression_utils_Chars.OPEN_BRACKET_CODE = 91
haxpression_utils_Chars.CLOSE_BRACKET_CODE = 93
haxpression_utils_Chars.UNDERSCORE_CODE = 95
haxpression_utils_Chars.OTHER_IDENTIFIER_START_CODES = []
haxpression_utils_Chars.OTHER_IDENTIFIER_PART_CODES = [haxpression_utils_Chars.EXCLAMATION_POINT_CODE, haxpression_utils_Chars.DOLLAR_CODE, haxpression_utils_Chars.COLON_CODE]
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")